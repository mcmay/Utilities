
Sat Jan 26 04:45:17 GMT 2019

A process is more than the program code, which is sometimes known as the text section. It also includes the current activity, as represented by the value of the program counter and the contents of the processor’s registers. A process generally also includes the process stack, which contains temporary data (such as function parameters, return addresses, and local variables), and a data section, which contains global variables. A process may also include a heap, which is memory that is dynamically allocated during process run time.

Note
3.1.1 The Process

3.1.2 Process State

Note
3.1.2 Process State

Each process may be in one of the following states: • New. The process is being created. • Running. Instructions are being executed. • Waiting. The process is waiting for some event to occur (such as an I/O completion or reception of a signal). • Ready. The process is waiting to be assigned to a processor. • Terminated. The process has finished execution.

It is important to realize that only one process can be running on any processor at any instant.

Note
One process per thread 

CHAPTER 2 Operating System Structures

Note
Ch2

It is important that the goals of the system be well defined before the design begins.

Note
Goals are important

One view focuses on the services that the system provides; another, on the interface that it makes available to users and programmers; a third, on its components and their interconnections.

Note
Vantage points to look at an operating system

CHAPTER OBJECTIVES • To describe the services an operating system provides to users, processes, and other systems. • To discuss the various ways of structuring an operating system. • To explain how operating systems are installed and customized and how they boot.

Note
Chapter objs

2.1 Operating-System Services

Note
2..1

Figure 2.1 A view of operating system services.

Note
Fig2.1

• User interface.

Note
OS services

One is a DTrace command-line interface (CLI),

Note
CLI

batch interface,

Note
batch

graphical user interface (GUI)

Note
GUI

• Program execution.

Note
Prog exec 

• I/O operations.

Note
I/O

• File-system manipulation.

Note
FS management

• Communications.

Note
Comm

• Error detection.

Note
Err detect

• Resource allocation.

Another set of operating-system functions exists not for helping the user but rather for ensuring the efficient operation of the system itself.

• Resource allocation.

• Accounting.

•

2.2 User Operating-System Interface

When there are multiple users or multiple jobs running at the same time, resources must be allocated to each of them.

two fundamental approaches. One provides a command-line interface, or command interpreter,

The other allows users to interface with the operating system via a graphical user interface, or GUI.

2.2.1 Command Interpreter

the command interpreter in the kernel.

the command interpreter as a special program that is running when a job is initiated or when a user first logs on (on interactive systems).

shells.

The main function of the command interpreter is to get and execute the next user-specified command.

These commands can be implemented in two general ways.

In one approach, the command interpreter itself contains the code to execute the command.

An alternative approach—used by UNIX, among other operating systems —implements most commands through system programs.

A second strategy for interfacing with the operating system is through a user-friendly graphical user interface, or GUI.

2.3 System Calls System calls provide an interface to the services made available by an operating system.

an example to illustrate how system calls are used: writing a simple program to read data from one file and copy them to another file.

Typically, application developers design programs according to an application programming interface (API).

Three of the most common APIs available to application programmers

system-call names used throughout this text are generic examples.

there often exists a strong correlation between a function in the API and its associated system call within the kernel.

As an example of a standard API, consider the ReadFile() function in the Win32 API—a function for reading from a file. The API for this function appears in Figure 2.5.

The run-time support system

a system-call interface

The system-call interface intercepts function calls in the API and invokes the necessary system calls within the operating system.

Note
How does sys-call interace work?

Typically, a number is associated with each system call, and the system-call interface maintains a table indexed according to these numbers.

The relationship between an API, the system-call interface, and the operating system is shown in Figure 2.6, which illustrates how the operating system handles a user application invoking the open() system call.

Three general methods are used to pass parameters to the operating system.

in registers.

in a block,

onto the stack

2.4 Types of System Calls System calls can be grouped roughly into six major categories: process control, file manipulation, device manipulation, information maintenance, communications, and protection.

2.4.1 Process Control

A running program needs to be able to halt its execution either normally (end) or abnormally (abort).

Under either normal or abnormal circumstances, the operating system must transfer control to the invoking command interpreter. The command interpreter then reads the next command.

In a batch system,

Note
What happens when error ocurred on a batch system?

If the program discovers an error in its input and wants to terminate abnormally, it may also want to define an error level.

A process or job executing one program may want to load and execute another program.

An interesting question is where to return control when the loaded program terminates.

Figure 2.8 Types of system calls.

If control returns to the existing program when the new program terminates, we must save the memory image of the existing program; thus, we have effectively created a mechanism for one program to call another program.

EXAMPLES OF WINDOWS AND UNIX SYSTEM CALLS

If we create a new job or process, or perhaps even a set of jobs or processes, we should be able to control its execution.

Note
What to do to control the execution of a process?

There are so many facets of and variations in process and job control that we next use two examples—one involving a single-tasking system and the other a multitasking system—to clarify these concepts.

2.4.2 File Management

several common system calls dealing with files.

File attributes include the file name, file type, protection codes, accounting information, and so on. At least two system calls, get file attribute and set file attribute, are required for this function.

2.4.3 Device Management

The various resources controlled by the operating system can be thought of as devices. Some of these devices are physical devices (for example, disk drives), while others can be thought of as abstract or virtual devices (for example, files).

the similarity between I/O devices and files is so great that many operating systems, including UNIX, merge the two into a combined file-device structure.

2.4.4 Information Maintenance

Many system calls exist simply for the purpose of transferring information between the user program and the operating system.

information about the system,

Another set of system calls is helpful in debugging a program.

Many operating systems provide a time profile of a program to indicate the amount of time that the program executes at a particular location or set of locations.

In addition, the operating system keeps information about all its processes, and system calls are used to access this information.

2.4.5 Communication

There are two common models of interprocess communication: the message-passing model and the shared-memory model.

Before communication can take place, a connection must be opened. The name of the other communicator must be known, be it another process on the same system or a process on another computer connected by a communications network.

Note
How is a connection opened to enable IPC in a message-passing model?

process name,

hostid and get processid system calls do this translation.

get hostid and get processid system calls

each process has a process name, and this name is translated into an identifier by which the operating system can refer to the process. The get hostid and get processid system calls do this translation.

Most processes that will be receiving connections are special-purpose daemons, which are systems programs provided for that purpose.

The source of the communication, known as the client, and the receiving daemon, known as a server, then exchange messages by using read message and write message system calls.

In the shared-memory model, processes use shared memory create and shared memory attach system calls to create and gain access to regions of memory owned by other processes.

Shared memory requires that two or more processes agree to remove this restriction.

The processes are also responsible for ensuring that they are not writing to the same location simultaneously.

Message passing is useful for exchanging smaller amounts of data, because no conflicts need be avoided. It is also easier to implement than is shared memory for intercomputer communication. Shared memory allows maximum speed and convenience of communication, since it can be done at memory transfer speeds when it takes place within a computer. Problems exist, however, in the areas of protection and synchronization between the processes sharing memory.

Note
What are the advantages and disadvantages of the message-passing and the shared memory models?

2.4.6 Protection

Sat Jan 26 04:45:23 GMT 2019

Sun Jan 27 05:37:38 GMT 2019

Protection provides a mechanism for controlling access to the resources provided by a computer system.

Note
Typically, system calls providing protection include set permission and get permission, which manipulate the permission settings of resources such as files and disks.

What sys calls are provided to enable protection?

Note
2.5 System Programs

They can be divided into these categories:

• File management.

Note
• Status information.

• File modification.

Note
• Programming-language support.

• Program loading and execution.

Note
• Communications.

In addition to systems programs, most operating systems are supplied with programs that are useful in solving common problems or performing common operations.

Note
2.6 Operating-System Design and Implementation

2.6.1 Design Goals

Note
At the highest level, the design of the system will be affected by

What are the factors affecting the design of os?

Note
user goals and system goals.

these principles.

Note
Principles for os design

2.6.2 Mechanisms and Policies One important principle is the separation of policy from mechanism.

Note
2.6.2 Mechanisms and Policies One important principle is the separation of policy from mechanism. Mechanisms determine how to do something; policies determine what will be done.

A general mechanism insensitive to changes in policy would be more desirable.

Note
A general mechanism insensitive to changes in policy would be more desirable. A change in policy would then require redefinition of only certain parameters of the system.

Microkernel-based operating systems (Section 2.7.3) take the separation of mechanism and policy to one extreme by implementing a basic set of primitive building blocks. These blocks are almost policy free, allowing more advanced mechanisms and policies to be added via user-created kernel modules or via user programs themselves.

Note
What do microkernel sys do to separate mechanism from policy?

At the other extreme is a system such as Windows, in which both mechanism and policy are encoded in the system to enforce a global look and feel.

Note
Policy decisions are important for all resource allocation.

Whenever the question is how rather than what, it is a mechanism that must be determined.

Note
2.6.3 Implementation

The advantages of using a higher-level language, or at least a systems-implementation language, for implementing operating systems are

Note
What are the advantages of using a higher-level language for implementing os?

The only possible disadvantages of implementing an operating system in a higher-level language are reduced speed and increased storage requirements.

Note
What is the only possible disadvantage?

the memory manager and the CPU scheduler are probably the most critical routines.

Note
only a small amount of the code is critical to high performance; the memory manager and the CPU scheduler are probably the most critical routines.

2.7 Operating-System Structure

Note
A common approach is to partition the task into small components rather than have one monolithic system. Each of these modules should be a well-defined portion of the system, with carefully defined inputs, outputs, and functions.

What is the common approach to engineer an os if it is to func properly and be modified easily?

2.7.1 Simple Structure

such systems started as small, simple, and limited systems and then grew beyond their original scope. MS-DOS is an example

Another example of limited structuring is the original UNIX operating system.

Figure 2.12 shows its structure.

Another example of limited structuring is the original UNIX operating system.

the kernel and the system programs.

It consists of two separable parts: the kernel and the system programs. The kernel is further separated into a series of interfaces and device drivers, which have been added and expanded over the years as UNIX has evolved. We can view the traditional UNIX operating system as being layered, as shown in Figure 2.13.

How was the original Unix sys structured?

2.7.2 Layered Approach

Information hiding is also important,

Why is info hiding important?

A system can be made modular in many ways. One method is the layered approach, in which the operating system is broken into a number of layers (levels).

What's the approach to modularize an os?

Figure 2.14 A layered operating system.

An operating-system layer is an implementation of an abstract object made up of data and the operations that can manipulate those data. A typical operating-system layer—say, layer M—consists of data structures and a set of routines that can be invoked by higher-level layers.

The main advantage of the layered approach is simplicity of construction and debugging.

What is the main advantage of the layered approach?

The major difficulty with the layered approach involves appropriately defining the various layers.

What's the major issue wiith the layered aproach and why?

2.7.3 Microkernels

the microkernel approach.

How the microkernel approach implemented?

The main function of the microkernel is to provide a communication facility between the client program and the various services that are also running in user space. Communication is provided by message passing,

One benefit of the microkernel approach is ease of extending the operating system.

The microkernel also provides more security and reliability, since most services are running as user—rather than kernel—processes.

The Mach kernel maps UNIX system calls into messages to the appropriate user-level services.

2.7.4 Modules

Note
Perhaps the best current methodology for operating-system design involves using object-oriented programming techniques to create a modular kernel.

Here, the kernel has a set of core components and links in additional services either during boot time or during run time. Such a strategy uses dynamically loadable modules and is common in modern implementations of UNIX,

the Solaris operating system structure, shown in Figure 2.15, is organized around a core kernel with seven types of loadable kernel modules:

The Apple Mac OS X operating system uses a hybrid structure. It is a layered system in which one layer consists of the Mach microkernel. The structure of Mac OS X appears in Figure 2.16.

The top layers include

Below these layers is the kernel environment, which consists primarily of

Mach provides

The BSD component provides

In addition to Mach and BSD, the kernel environment provides

2.8 Virtual Machines

The fundamental idea behind a virtual machine is

2.8.1 History

Note
2.8.2 Benefits

One important advantage is

At the same time, however, there is no direct sharing of resources. Two approaches to provide sharing have been implemented.

A major advantage of virtual machines in production data-center use is system consolidation, which involves taking two or more separate systems and running them in virtual machines on one system.

2.8.3 Simulation

Another methodology is simulation, in which the host system has one system architecture and the guest system was compiled for a different architecture.

Emulation can increase the life of programs and allow us to explore old architectures without having an actual old machine, but its major challenge is performance.

Another challenge is that it is difficult to create a correct emulator because, in essence, this involves writing an entire CPU in software.

Note
2.8.4 Para-virtualization

Rather than try to trick a guest operating system into believing it has a system to itself, para-virtualization presents the guest with a system that is similar but not identical to the guest’s preferred system.

2.8.5 Implementation

The virtual-machine software can run in kernel mode, since it is the operating system. The virtual machine itself can execute in only user mode.

Such a transfer can be accomplished as follows.

How's a sys call made by a prog running on a VM in virtual user mode processed on the real machine?

All major general-purpose CPUs provide some amount of hardware support for virtualization.

2.8.6 Examples

the VMware Workstation and the Java virtual machine.

2.8.6.1 VMware

Most of the virtualization techniques discussed in this section require virtualization to be supported by the kernel. Another method involves writing the virtualization tool to run in user mode as an application on top of the operating system.

Figure 2.19 VMware architecture.

2.8.6.2 The Java Virtual Machine

For each Java class, the compiler produces an architecture-neutral bytecode output (.class) file that will run on any implementation of the JVM.

The JVM is a specification for an abstract computer. It consists of a class loader and a Java interpreter that executes the architecture-neutral bytecodes, as diagrammed in Figure 2.20.

A faster software technique is to use a just-in-time (JIT) compiler.

THE .NET FRAMEWORK

Note
A technique that is potentially even faster is to run the JVM in hardware on a THE .NET FRAMEWORK

The .NET Framework is a collection of technologies, including a set of class libraries, and an execution environment that come together to provide a platform for developing software.

At the core of the .NET Framework is the Common Language Runtime (CLR). The CLR is the implementation of the .NET virtual machine.

Figure 2.21 Architecture of the CLR for the .NET Framework.

A technique that is potentially even faster is to run the JVM in hardware on a

special Java chip that executes the Java bytecode operations as native code, thus bypassing the need for either a software interpreter or a just-in-time compiler.

THE .NET FRAMEWORK

The .NET Framework is a collection of technologies, including a set of class libraries, and an execution environment that come together to provide a platform for developing software.

At the core of the .NET Framework is the Common Language Runtime (CLR). The CLR is the implementation of the .NET virtual machine.

Figure 2.21 Architecture of the CLR for the .NET Framework.

Sat Feb 02 01:04:23 GMT 2019

A technique that is potentially even faster is to run the JVM in hardware on a

Note
special Java chip that executes the Java bytecode operations as native code, thus bypassing the need for either a software interpreter or a just-in-time compiler.

THE .NET FRAMEWORK

Note
The .NET Framework is a collection of technologies, including a set of class libraries, and an execution environment that come together to provide a platform for developing software.

At the core of the .NET Framework is the Common Language Runtime (CLR). The CLR is the implementation of the .NET virtual machine.

Figure 2.21 Architecture of the CLR for the .NET Framework.

Note
2.9 Operating-System Debugging

Performance problems are considered bugs, so debugging can also include performance tuning, which seeks to improve performance by removing bottlenecks in the processing taking place within a system.

Note
2.9.1 Failure Analysis

If a process fails, most operating systems write the error information to a log file to alert system operators or users that the problem occurred. The operating system can also take a core dump—a capture of the memory (referred to as the “core” in the early days of computing) of the process. This core image is stored in a file for later analysis.

Note
What're the facilities provided by an os for debugging sys failure?

Running programs and core dumps can be probed by a debugger,

Note
A kernel failure is called a crash.

A kernel failure is called a crash. As with a process failure, error information is saved to a log file, and the memory state is saved to a crash dump.

Note
2.9.2 Performance Tuning

Code must be added to compute and display measures of system behavior. In a number of systems, the operating system does this task by producing trace listings of system behavior. All interesting events are logged with their time and important parameters and are written to a file.

Note
Another approach to performance tuning is to include interactive tools with the system that allow users and administrators to question the state of various components of the system to look for bottlenecks. The UNIX command top displays resources used on the system, as well as a sorted list of the “top” resource-using processes. Other tools display the state of disk I/O, memory allocation, and network traffic.

The cycle of enabling tracing as system problems occur and analyzing the traces later is being broken by a new generation of kernel-enabled performance analysis tools. Further, these tools are not single-purpose or merely for sections of code that were written to emit debugging data. The Solaris 10 DTrace dynamic tracing facility is a leading example of such a tool.

Note
2.9.3 DTrace

DTrace is a facility that dynamically adds probes to a running system, both in user processes and in the kernel. These probes can be queried via the D programming language to determine an astonishing amount about the kernel, the system state, and process activities.

Note
Profiling, which periodically samples the instruction pointer to determine which code is being executed, can show statistical trends but not individual activities.

DTrace is composed of a compiler, a framework, providers of probes written within that framework, and consumers of those probes. DTrace providers create probes.

Note
Different providers create different kinds of probes.

DTrace features a compiler that generates a byte code that is run in the kernel. This code is assured to be “safe” by the compiler.

Note
Only users with the DTrace “privileges” (or “root” users) are allowed to use DTrace, as it can retrieve private kernel data (and modify data if requested).

A DTrace consumer is code that is interested in a probe and its results. A consumer requests that the provider create one or more probes. When a probe fires, it emits data that are managed by the kernel.

Note
A DTrace consumer is code that is interested in a probe and its results. A consumer requests that the provider create one or more probes. When a probe fires, it emits data that are managed by the kernel. Within the kernel, actions called enabling control blocks, or ECBs, are performed when probes fire.

2.10 Operating-System Generation

Note
system generation (SYSGEN).

What's known as SYSGEN?

Note
The following kinds of information must be determined.

What kinds of info must be determined to generate an os?

Note
Once this information is determined, it can be used in several ways.

How can the info be used?

Note
Once this information is determined, it can be used in several ways.

In what ways can the info gathered be used to build a system?

Note
on.

2.11 System Boot

But how does the hardware know where the kernel is or how to load that kernel?

On most computer systems, a small piece of code known as the bootstrap program or bootstrap loader locates the kernel, loads it into main memory, and starts its execution.

When a CPU receives a reset event—for instance, when it is powered up or rebooted—the instruction register is loaded with a predefined memory location, and execution starts there. At that location is the initial bootstrap program. This program is in the form of read-only memory (ROM),

What happens at sys startup?

erasable programmable read-only memory (EPROM),

firmware,

For large operating systems (including most general-purpose operating systems like Windows, Mac OS X, and UNIX) or for systems that change frequently, the bootstrap loader is stored in firmware, and the operating system is on disk. In this case, the bootstrap runs diagnostics and has a bit of code that can read a single block at a fixed location (say block zero) from disk into memory and execute the code from that boot block.

GRUB is an example of an open-source bootstrap program for Linux systems.

2.12 Summary

system calls

the command interpreter or shell

The types of requests vary according to level.

The system-call level

Higher-level requests, satisfied by the command interpreter or system programs, are translated into a sequence of system calls.

Once the system services are defined, the structure of the operating system can be developed.

The design of a new operating system

the goals of the system be well defined before the design begins.

modularity is important.

Designing a system as a sequence of layers or using a microkernel is considered a good technique.

The virtual-machine concept

the entire operating-system design cycle,

separate policy decisions from implementation details (mechanisms).

systems-implementation language or in a higher-level language.

system generation.

Debugging process and kernel failures can be accomplished through the use of debuggers and other tools that analyze core dumps.

DTrace

the bootstrap program in firmware.

Sun Feb 10 10:28:22 GMT 2019
