2666 (Reberto Bolano)
- Bookmark Loc. 3434 | Added on Saturday, September 22, 2018, 09:29 AM


==========
Operating System Concepts (Greg Gagne)
- Bookmark Loc. 426 | Added on Wednesday, November 07, 2018, 07:52 AM


==========
Operating System Concepts (Greg Gagne)
- Bookmark Loc. 2582 | Added on Wednesday, November 28, 2018, 11:10 AM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 329 | Added on Tuesday, December 11, 2018, 10:51 AM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 2850 | Added on Sunday, December 23, 2018, 04:34 PM


==========
Operating System Concepts (Greg Gagne)
- Bookmark Loc. 3310 | Added on Saturday, January 12, 2019, 04:52 PM


==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2743-47 | Added on Monday, January 14, 2019, 11:53 AM

A process is more than the program code, which is sometimes known as the text section. It also includes the current activity, as represented by the value of the program counter and the contents of the processor’s registers. A process generally also includes the process stack, which contains temporary data (such as function parameters, return addresses, and local variables), and a data section, which contains global variables. A process may also include a heap, which is memory that is dynamically allocated during process run time.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2747 | Added on Monday, January 14, 2019, 11:57 AM

3.1.1 The Process
==========
Operating System Concepts (Greg Gagne)
- Bookmark Loc. 2746 | Added on Tuesday, January 15, 2019, 01:15 AM


==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2758 | Added on Tuesday, January 15, 2019, 01:25 AM

3.1.2 Process State
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2758 | Added on Tuesday, January 15, 2019, 01:26 AM

3.1.2 Process State
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2760-65 | Added on Tuesday, January 15, 2019, 01:28 AM

Each process may be in one of the following states: • New. The process is being created. • Running. Instructions are being executed. • Waiting. The process is waiting for some event to occur (such as an I/O completion or reception of a signal). • Ready. The process is waiting to be assigned to a processor. • Terminated. The process has finished execution.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2767-68 | Added on Tuesday, January 15, 2019, 01:32 AM

It is important to realize that only one process can be running on any processor at any instant.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2767 | Added on Tuesday, January 15, 2019, 01:34 AM

One process per thread 
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1649-50 | Added on Tuesday, January 15, 2019, 09:29 AM

CHAPTER 2 Operating System Structures
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1650 | Added on Tuesday, January 15, 2019, 09:32 AM

Ch2
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1670-71 | Added on Tuesday, January 15, 2019, 09:33 AM

It is important that the goals of the system be well defined before the design begins.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1671 | Added on Tuesday, January 15, 2019, 09:34 AM

Goals are important
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1672-74 | Added on Tuesday, January 15, 2019, 09:42 AM

One view focuses on the services that the system provides; another, on the interface that it makes available to users and programmers; a third, on its components and their interconnections.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1674 | Added on Tuesday, January 15, 2019, 09:42 AM

Vantage points to look at an operating system
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1677-81 | Added on Tuesday, January 15, 2019, 09:44 AM

CHAPTER OBJECTIVES • To describe the services an operating system provides to users, processes, and other systems. • To discuss the various ways of structuring an operating system. • To explain how operating systems are installed and customized and how they boot.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1681 | Added on Tuesday, January 15, 2019, 09:45 AM

Chapter objs
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1682 | Added on Tuesday, January 15, 2019, 09:53 AM

2.1 Operating-System Services
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1681 | Added on Tuesday, January 15, 2019, 09:54 AM

2..1
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1687-88 | Added on Tuesday, January 15, 2019, 09:58 AM

Figure 2.1 A view of operating system services.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1688 | Added on Tuesday, January 15, 2019, 09:59 AM

Fig2.1
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1690 | Added on Tuesday, January 15, 2019, 11:27 AM

• User interface.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1690 | Added on Tuesday, January 15, 2019, 11:28 AM

OS services
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1691 | Added on Tuesday, January 15, 2019, 11:29 AM

One is a DTrace command-line interface (CLI),
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1691 | Added on Tuesday, January 15, 2019, 11:29 AM

CLI
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1692 | Added on Tuesday, January 15, 2019, 11:29 AM

batch interface,
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1692 | Added on Tuesday, January 15, 2019, 11:29 AM

batch
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1693 | Added on Tuesday, January 15, 2019, 11:30 AM

graphical user interface (GUI)
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1693 | Added on Tuesday, January 15, 2019, 11:30 AM

GUI
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1695 | Added on Tuesday, January 15, 2019, 11:31 AM

• Program execution.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1695 | Added on Tuesday, January 15, 2019, 11:31 AM

Prog exec 
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1697 | Added on Tuesday, January 15, 2019, 11:32 AM

• I/O operations.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1697 | Added on Tuesday, January 15, 2019, 11:32 AM

I/O
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1700 | Added on Tuesday, January 15, 2019, 11:32 AM

• File-system manipulation.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1700 | Added on Tuesday, January 15, 2019, 11:32 AM

FS management
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1704 | Added on Tuesday, January 15, 2019, 11:35 AM

• Communications.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1704 | Added on Tuesday, January 15, 2019, 11:35 AM

Comm
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1708 | Added on Tuesday, January 15, 2019, 11:36 AM

• Error detection.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1708 | Added on Tuesday, January 15, 2019, 11:36 AM

Err detect
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4758 | Added on Friday, January 18, 2019, 01:49 AM

inheritance chain.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4757 | Added on Friday, January 18, 2019, 01:49 AM

inheritance hierarchy,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4768 | Added on Friday, January 18, 2019, 01:50 AM

“is–a” rule
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4771 | Added on Friday, January 18, 2019, 01:51 AM

substitution principle.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4771 | Added on Friday, January 18, 2019, 01:52 AM

substitution principle. That principle states that you can use a subclass object whenever the program expects a superclass object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4775 | Added on Friday, January 18, 2019, 01:53 AM

object variables are polymorphic.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4780-81 | Added on Friday, January 18, 2019, 01:55 AM

In this case, the variables staff[0] and boss refer to the same object. However, staff[0] is considered to be only an Employee object by the compiler.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4791-92 | Added on Friday, January 18, 2019, 01:56 AM

arrays of subclass references can be converted to arrays of superclass references without a cast.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4806-7 | Added on Friday, January 18, 2019, 01:58 AM

To make sure no such corruption can occur, all arrays remember the element type with which they were created, and they monitor that only compatible references are stored into them.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4819 | Added on Friday, January 18, 2019, 02:00 AM

overloading resolution.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4827-28 | Added on Friday, January 18, 2019, 02:02 AM

If you define a method in a subclass that has the same signature as a superclass method, then you override that method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4829-30 | Added on Friday, January 18, 2019, 02:04 AM

when you override a method, you need to keep the return type compatible. A subclass may change the return type to a subtype of the original type.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4837 | Added on Friday, January 18, 2019, 02:05 AM

covariant return types.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4839 | Added on Friday, January 18, 2019, 02:06 AM

static binding.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4838-39 | Added on Friday, January 18, 2019, 02:07 AM

the method is private, static, final, or a constructor, then the compiler knows exactly which method to call.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4842-43 | Added on Friday, January 18, 2019, 02:08 AM

When the program runs and uses dynamic binding to call a method, then the virtual machine must call the version of the method that is appropriate for the actual type of the object to which x refers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4846-47 | Added on Friday, January 18, 2019, 02:10 AM

the virtual machine precomputes for each class a method table that lists all method signatures and the actual methods to be called.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4872 | Added on Friday, January 18, 2019, 02:15 AM

Dynamic binding has a very important property: It makes programs extensible without the need for modifying existing code.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4877-78 | Added on Friday, January 18, 2019, 02:16 AM

When you override a method, the subclass method must be at least as visible as the superclass method. In particular, if the superclass method is public, then the subclass method must also be declared as public.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 4714 | Added on Saturday, January 19, 2019, 01:09 AM


==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1716 | Added on Monday, January 21, 2019, 12:31 PM

• Resource allocation.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1714-15 | Added on Monday, January 21, 2019, 12:32 PM

Another set of operating-system functions exists not for helping the user but rather for ensuring the efficient operation of the system itself.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1716 | Added on Monday, January 21, 2019, 12:32 PM

• Resource allocation.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1198 | Added on Tuesday, January 22, 2019, 07:34 PM

2.3.1. Troubleshooting Hints
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1229-30 | Added on Tuesday, January 22, 2019, 09:36 PM

2.4. Using an Integrated Development Environment
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1252 | Added on Tuesday, January 22, 2019, 09:42 PM

2.4.1. Locating Compilation Errors
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1265 | Added on Tuesday, January 22, 2019, 09:43 PM

2.5. Running a Graphical Application
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1313 | Added on Wednesday, January 23, 2019, 01:25 AM

2.6. Building and Running Applets
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1315-16 | Added on Wednesday, January 23, 2019, 01:26 AM

most of the early hype about Java came from its ability to run applets inside a web browser.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1385-86 | Added on Wednesday, January 23, 2019, 01:32 AM

Chapter 3. Fundamental Programming Structures in Java
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1405 | Added on Wednesday, January 23, 2019, 09:38 AM

3.1. A Simple Java Program
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1413 | Added on Wednesday, January 23, 2019, 09:40 AM

access modifier;
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1413-14 | Added on Wednesday, January 23, 2019, 09:41 AM

access modifier; these modifiers control the level of access other parts of a program have to this code.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1418-19 | Added on Wednesday, January 23, 2019, 09:42 AM

Names must begin with a letter, and after that, they can have any combination of letters and digits.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1423-24 | Added on Wednesday, January 23, 2019, 09:50 AM

You need to make the file name for the source code the same as the name of the public class,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1448-50 | Added on Wednesday, January 23, 2019, 10:36 AM

it is remarkable that Sun made the bug reports and their resolutions available for anyone to scrutinize, long before Java was open source. The “bug parade” is a very useful resource for programmers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1468-70 | Added on Wednesday, January 23, 2019, 10:40 AM

If the main method exits normally, the Java program has the exit code 0, indicating successful completion. To terminate the program with a different exit code, use the System.exit method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1485-86 | Added on Wednesday, January 23, 2019, 10:48 AM

a variant of the println method with no parameters just prints a blank line. You invoke it with the call System.out.println();
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1488-89 | Added on Wednesday, January 23, 2019, 10:49 AM

System.out also has a print method that doesn’t add a newline character to the output.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1490-91 | Added on Wednesday, January 23, 2019, 10:49 AM

3.2. Comments
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1496-97 | Added on Wednesday, January 23, 2019, 10:50 AM

a third kind of comment can be used to generate documentation automatically. This comment uses a /** to start and a */ to end.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1509 | Added on Wednesday, January 23, 2019, 10:51 AM

3.3. Data Types
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1510-11 | Added on Wednesday, January 23, 2019, 10:52 AM

There are eight primitive types in Java.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1517 | Added on Wednesday, January 23, 2019, 10:53 AM

3.3.1. Integer Types
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1520-21 | Added on Wednesday, January 23, 2019, 01:08 PM

In most situations, the int type is the most practical.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1521-23 | Added on Wednesday, January 23, 2019, 01:11 PM

The byte and short types are mainly intended for specialized applications, such as low-level file handling, or for large arrays when storage space is at a premium.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1523-24 | Added on Wednesday, January 23, 2019, 01:22 PM

Under Java, the ranges of the integer types do not depend on the machine on which you will be running the Java code.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1527-29 | Added on Wednesday, January 23, 2019, 01:34 PM

Long integer numbers have a suffix L (for example, 4000000000L). Hexadecimal numbers have a prefix 0x (for example, 0xCAFE). Octal numbers have a prefix 0. For example, 010 is 8.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1530 | Added on Wednesday, January 23, 2019, 01:53 PM

Starting with Java 7, you can write numbers in binary, with a prefix 0b.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1530-32 | Added on Wednesday, January 23, 2019, 01:54 PM

Also starting with Java 7, you can add underscores to number literals, such as 1_000_000 (or 0b1111_0100_0010_0100_0000) to denote one million. The underscores are for human eyes only. The Java compiler simply removes them.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1538-39 | Added on Wednesday, January 23, 2019, 02:42 PM

Note that Java does not have any unsigned types.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1539-40 | Added on Wednesday, January 23, 2019, 03:54 PM

3.3.2. Floating-Point Types
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1544 | Added on Wednesday, January 23, 2019, 03:55 PM

Here, the type to choose in most applications is double.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1547-49 | Added on Wednesday, January 23, 2019, 03:56 PM

Numbers of type float have a suffix F (for example, 3.14F). Floating-point numbers without an F suffix (such as 3.14) are always considered to be of type double. You can optionally supply the D suffix (for example, 3.14D).
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1551-53 | Added on Wednesday, January 23, 2019, 03:56 PM

You can specify floating-point literals in hexadecimal. For example, 0.125 = 2–3 can be written as 0x1.0p-3. In hexadecimal notation, you use a p, not an e, to denote the exponent.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1553-54 | Added on Wednesday, January 23, 2019, 03:57 PM

Note that the mantissa is written in hexadecimal and the exponent in decimal. The base of the exponent is 2, not 10.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1555-59 | Added on Wednesday, January 23, 2019, 04:00 PM

In particular, there are three special floating-point values to denote overflows and errors: • Positive infinity • Negative infinity • NaN (not a number) For example, the result of dividing a positive number by 0 is positive infinity. Computing 0/0 or the square root of a negative number yields NaN.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1561-63 | Added on Wednesday, January 23, 2019, 04:00 PM

The constants Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, and Double.NaN (as well as corresponding Float constants) represent these special values,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1566-68 | Added on Wednesday, January 23, 2019, 04:01 PM

the Double.isNaN method: if (Double.isNaN(x)) // check whether x is "not a number"
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1571-72 | Added on Wednesday, January 23, 2019, 04:03 PM

Floating-point numbers are not suitable for financial calculations in which roundoff errors cannot be tolerated.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1574-75 | Added on Wednesday, January 23, 2019, 04:04 PM

If you need precise numerical computations without roundoff errors, use the BigDecimal class,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1576 | Added on Wednesday, January 23, 2019, 04:04 PM

3.3.3. The char Type
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1576-77 | Added on Wednesday, January 23, 2019, 04:05 PM

3.3.3. The char Type The char type is used to describe individual characters. Most commonly, these will be character constants.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1578-79 | Added on Wednesday, January 23, 2019, 04:05 PM

Unicode code units can be expressed as hexadecimal values that run from \u0000 to \uFFFF.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1580 | Added on Wednesday, January 23, 2019, 04:06 PM

the \u escape sequences
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1581-83 | Added on Wednesday, January 23, 2019, 04:08 PM

there are several escape sequences for special characters, as shown in Table 3.3. You can use these escape sequences inside quoted character constants and strings, such as '\u2122' or "Hello\n". The \u escape sequence (but none of the other escape sequences) can even be used outside quoted character constants and strings.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1599-1603 | Added on Wednesday, January 23, 2019, 04:18 PM

A code point is a code value that is associated with a character in an encoding scheme. In the Unicode standard, code points are written in hexadecimal and prefixed with U+, such as U+0041 for the code point of the Latin letter A. Unicode has code points that are grouped into 17 code planes. The first code plane, called the basic multilingual plane, consists of the “classic” Unicode characters with code points U+0000 to U+FFFF. Sixteen additional planes, with code points U+10000 to U+10FFFF, hold the supplementary characters.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1599 | Added on Wednesday, January 23, 2019, 04:20 PM

A code point is a code value that is associated with a character in an encoding scheme.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1599-1600 | Added on Wednesday, January 23, 2019, 04:21 PM

In the Unicode standard, code points are written in hexadecimal and prefixed with U+, such as U+0041 for the code point of the Latin letter A.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1599-1603 | Added on Wednesday, January 23, 2019, 04:22 PM

A code point is a code value that is associated with a character in an encoding scheme. In the Unicode standard, code points are written in hexadecimal and prefixed with U+, such as U+0041 for the code point of the Latin letter A. Unicode has code points that are grouped into 17 code planes. The first code plane, called the basic multilingual plane, consists of the “classic” Unicode characters with code points U+0000 to U+FFFF. Sixteen additional planes, with code points U+10000 to U+10FFFF, hold the supplementary characters.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1603-7 | Added on Wednesday, January 23, 2019, 04:24 PM

The UTF-16 encoding represents all Unicode code points in a variable-length code. The characters in the basic multilingual plane are represented as 16-bit values, called code units. The supplementary characters are encoded as consecutive pairs of code units. Each of the values in such an encoding pair falls into a range of 2048 unused values of the basic multilingual plane, called the surrogates area (U+D800 to U+DBFF for the first code unit, U+DC00 to U+DFFF for the second code unit).
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1610-14 | Added on Wednesday, January 23, 2019, 04:35 PM

In Java, the char type describes a code unit in the UTF-16 encoding. Our strong recommendation is not to use the char type in your programs unless you are actually manipulating UTF-16 code units. You are almost always better off treating strings (which we will discuss in Section 3.6, “Strings,” on p. 64) as abstract data types. 3.3.4. The boolean Type
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1615-16 | Added on Wednesday, January 23, 2019, 04:36 PM

You cannot convert between integers and boolean values.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1624-25 | Added on Wednesday, January 23, 2019, 04:37 PM

3.4. Variables
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1630-31 | Added on Wednesday, January 23, 2019, 04:39 PM

Note that the terms “letter” and “digit” are much broader in Java than in most languages. A letter is defined as 'A'–'Z', 'a'–'z', '_', '$', or any Unicode character that denotes a letter in a language.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1636-38 | Added on Wednesday, January 23, 2019, 04:41 PM

If you are really curious as to what Unicode characters are “letters” as far as Java is concerned, you can use the isJavaIdentifierStart and isJavaIdentifierPart methods in the Character class to check.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1640-41 | Added on Wednesday, January 23, 2019, 04:42 PM

Even though $ is a valid Java letter, you should not use it in your own code. It is intended for names that are generated by the Java compiler and other tools.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1656 | Added on Wednesday, January 23, 2019, 04:44 PM

3.4.1. Initializing Variables
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1664-65 | Added on Wednesday, January 23, 2019, 04:44 PM

in Java you can put declarations anywhere in your code.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1668-69 | Added on Wednesday, January 23, 2019, 04:45 PM

In Java, it is considered good style to declare variables as closely as possible to the point where they are first used.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1677-78 | Added on Wednesday, January 23, 2019, 04:46 PM

3.4.2. Constants In Java, you use the keyword final to denote a constant.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1686-87 | Added on Wednesday, January 23, 2019, 04:47 PM

class constants. Set up a class constant with the keywords static final.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1698-99 | Added on Wednesday, January 23, 2019, 07:32 PM

3.5. Operators
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1702-3 | Added on Wednesday, January 23, 2019, 07:33 PM

Note that integer division by 0 raises an exception, whereas floating-point division by 0 yields an infinite or NaN result.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1721-22 | Added on Wednesday, January 23, 2019, 07:36 PM

methods tagged with the strictfp keyword must use strict floating-point operations that yield reproducible results.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1721-28 | Added on Wednesday, January 23, 2019, 07:37 PM

methods tagged with the strictfp keyword must use strict floating-point operations that yield reproducible results. For example, you can tag main as public static strictfp void main(String[] args) Then all instructions inside the main method will use strict floating-point computations. If you tag a class as strictfp, then all of its methods must use strict floating-point computations.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1735 | Added on Wednesday, January 23, 2019, 11:56 PM

3.5.1. Increment and Decrement Operators
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1749 | Added on Wednesday, January 23, 2019, 11:59 PM

3.5.2. Relational and boolean Operators
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1773-74 | Added on Thursday, January 24, 2019, 12:04 AM

3.5.3. Bitwise Operators
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1788-90 | Added on Thursday, January 24, 2019, 12:09 AM

a >>> operator fills the top bits with zero, unlike >> which extends the sign bit into the top bits. There is no <<< operator.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1792-93 | Added on Thursday, January 24, 2019, 12:11 AM

The right-hand side argument of the shift operators is reduced modulo 32 (unless the left-hand side is a long, in which case the right-hand side is reduced modulo 64). For example, the value of 1 << 35 is the same as 1 << 3 or 8.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1799 | Added on Thursday, January 24, 2019, 12:12 AM

3.5.4. Mathematical Functions and Constants
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1820-22 | Added on Thursday, January 24, 2019, 12:15 AM

You can avoid the Math prefix for the mathematical methods and constants by adding the following line to the top of your source file: import static java.lang.Math.*;
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1830-32 | Added on Thursday, January 24, 2019, 12:56 AM

If completely predictable results are more important than fast performance, use the StrictMath class instead. It implements the algorithms from the “Freely Distributable Math Library” fdlibm, guaranteeing identical results on all platforms.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1834-35 | Added on Thursday, January 24, 2019, 12:56 AM

3.5.5. Conversions between Numeric Types
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1837 | Added on Thursday, January 24, 2019, 12:57 AM

Figure 3.1. Legal conversions between numeric types
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1842-49 | Added on Thursday, January 24, 2019, 01:02 AM

When two values are combined with a binary operator (such as n + f where n is an integer and f is a floating-point value), both operands are converted to a common type before the operation is carried out. • If either of the operands is of type double, the other one will be converted to a double. • Otherwise, if either of the operands is of type float, the other one will be converted to a float. • Otherwise, if either of the operands is of type long, the other one will be converted to a long. • Otherwise, both operands will be converted to an int.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1849 | Added on Thursday, January 24, 2019, 01:02 AM

3.5.6. Casts
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1855-57 | Added on Thursday, January 24, 2019, 01:04 AM

If you want to round a floating-point number to the nearest integer (which in most cases is the more useful operation), use the Math.round method: double x = 9.997; int nx = (int) Math.round(x);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1858-59 | Added on Thursday, January 24, 2019, 01:05 AM

You still need to use the cast (int) when you call round.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1862-64 | Added on Thursday, January 24, 2019, 01:06 AM

If you try to cast a number of one type to another that is out of the range for the target type, the result will be a truncated number that has a different value. For example, (byte) 300 is actually 44.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1721-22 | Added on Thursday, January 24, 2019, 01:09 AM

• Accounting.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1724 | Added on Thursday, January 24, 2019, 01:10 AM

•
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1731 | Added on Thursday, January 24, 2019, 01:13 AM

2.2 User Operating-System Interface
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1716-17 | Added on Thursday, January 24, 2019, 01:14 AM

When there are multiple users or multiple jobs running at the same time, resources must be allocated to each of them.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1733 | Added on Thursday, January 24, 2019, 01:15 AM

two fundamental approaches. One provides a command-line interface, or command interpreter,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1734-35 | Added on Thursday, January 24, 2019, 01:16 AM

The other allows users to interface with the operating system via a graphical user interface, or GUI.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1735 | Added on Thursday, January 24, 2019, 01:16 AM

2.2.1 Command Interpreter
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1736 | Added on Thursday, January 24, 2019, 01:17 AM

the command interpreter in the kernel.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1737-38 | Added on Thursday, January 24, 2019, 01:17 AM

the command interpreter as a special program that is running when a job is initiated or when a user first logs on (on interactive systems).
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1738 | Added on Thursday, January 24, 2019, 01:18 AM

shells.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1742-43 | Added on Thursday, January 24, 2019, 01:20 AM

The main function of the command interpreter is to get and execute the next user-specified command.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1744 | Added on Thursday, January 24, 2019, 01:21 AM

These commands can be implemented in two general ways.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1745-46 | Added on Thursday, January 24, 2019, 01:21 AM

In one approach, the command interpreter itself contains the code to execute the command.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1748-49 | Added on Thursday, January 24, 2019, 01:22 AM

An alternative approach—used by UNIX, among other operating systems —implements most commands through system programs.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1757-58 | Added on Thursday, January 24, 2019, 08:45 AM

A second strategy for interfacing with the operating system is through a user-friendly graphical user interface, or GUI.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1785-87 | Added on Thursday, January 24, 2019, 08:53 AM

2.3 System Calls System calls provide an interface to the services made available by an operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1789-90 | Added on Thursday, January 24, 2019, 08:58 AM

an example to illustrate how system calls are used: writing a simple program to read data from one file and copy them to another file.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1813-14 | Added on Thursday, January 24, 2019, 09:03 AM

Typically, application developers design programs according to an application programming interface (API).
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1815-16 | Added on Thursday, January 24, 2019, 09:04 AM

Three of the most common APIs available to application programmers
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1817-18 | Added on Thursday, January 24, 2019, 09:04 AM

system-call names used throughout this text are generic examples.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1825-26 | Added on Thursday, January 24, 2019, 09:07 AM

there often exists a strong correlation between a function in the API and its associated system call within the kernel.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1828-30 | Added on Thursday, January 24, 2019, 09:07 AM

As an example of a standard API, consider the ReadFile() function in the Win32 API—a function for reading from a file. The API for this function appears in Figure 2.5.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1838-39 | Added on Thursday, January 24, 2019, 09:11 AM

The run-time support system
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1839 | Added on Thursday, January 24, 2019, 09:12 AM

a system-call interface
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1840-41 | Added on Thursday, January 24, 2019, 09:14 AM

The system-call interface intercepts function calls in the API and invokes the necessary system calls within the operating system.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1841 | Added on Thursday, January 24, 2019, 09:16 AM

How does sys-call interace work?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1841-42 | Added on Thursday, January 24, 2019, 09:45 AM

Typically, a number is associated with each system call, and the system-call interface maintains a table indexed according to these numbers.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1846-48 | Added on Thursday, January 24, 2019, 11:22 AM

The relationship between an API, the system-call interface, and the operating system is shown in Figure 2.6, which illustrates how the operating system handles a user application invoking the open() system call.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1854-55 | Added on Thursday, January 24, 2019, 11:25 AM

Three general methods are used to pass parameters to the operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1855 | Added on Thursday, January 24, 2019, 11:25 AM

in registers.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1856 | Added on Thursday, January 24, 2019, 11:26 AM

in a block,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1858 | Added on Thursday, January 24, 2019, 11:26 AM

onto the stack
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1860-62 | Added on Thursday, January 24, 2019, 11:27 AM

2.4 Types of System Calls System calls can be grouped roughly into six major categories: process control, file manipulation, device manipulation, information maintenance, communications, and protection.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1867 | Added on Thursday, January 24, 2019, 11:29 AM

2.4.1 Process Control
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1868 | Added on Thursday, January 24, 2019, 11:33 AM

A running program needs to be able to halt its execution either normally (end) or abnormally (abort).
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1871-72 | Added on Thursday, January 24, 2019, 11:34 AM

Under either normal or abnormal circumstances, the operating system must transfer control to the invoking command interpreter. The command interpreter then reads the next command.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1874 | Added on Thursday, January 24, 2019, 11:34 AM

In a batch system,
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1874 | Added on Thursday, January 24, 2019, 11:36 AM

What happens when error ocurred on a batch system?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1876-77 | Added on Thursday, January 24, 2019, 11:37 AM

If the program discovers an error in its input and wants to terminate abnormally, it may also want to define an error level.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1879-80 | Added on Thursday, January 24, 2019, 11:38 AM

A process or job executing one program may want to load and execute another program.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1881-82 | Added on Thursday, January 24, 2019, 11:38 AM

An interesting question is where to return control when the loaded program terminates.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1884 | Added on Thursday, January 24, 2019, 11:39 AM

Figure 2.8 Types of system calls.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1885-86 | Added on Thursday, January 24, 2019, 12:04 PM

If control returns to the existing program when the new program terminates, we must save the memory image of the existing program; thus, we have effectively created a mechanism for one program to call another program.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1889 | Added on Thursday, January 24, 2019, 12:17 PM

EXAMPLES OF WINDOWS AND UNIX SYSTEM CALLS
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1890-91 | Added on Thursday, January 24, 2019, 01:32 PM

If we create a new job or process, or perhaps even a set of jobs or processes, we should be able to control its execution.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1891 | Added on Thursday, January 24, 2019, 01:33 PM

What to do to control the execution of a process?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1907-9 | Added on Thursday, January 24, 2019, 02:50 PM

There are so many facets of and variations in process and job control that we next use two examples—one involving a single-tasking system and the other a multitasking system—to clarify these concepts.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1931 | Added on Thursday, January 24, 2019, 03:48 PM

2.4.2 File Management
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1932 | Added on Thursday, January 24, 2019, 03:48 PM

several common system calls dealing with files.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1938-39 | Added on Thursday, January 24, 2019, 03:51 PM

File attributes include the file name, file type, protection codes, accounting information, and so on. At least two system calls, get file attribute and set file attribute, are required for this function.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1942 | Added on Thursday, January 24, 2019, 08:47 PM

2.4.3 Device Management
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1945-47 | Added on Thursday, January 24, 2019, 08:48 PM

The various resources controlled by the operating system can be thought of as devices. Some of these devices are physical devices (for example, disk drives), while others can be thought of as abstract or virtual devices (for example, files).
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1951-52 | Added on Thursday, January 24, 2019, 08:52 PM

the similarity between I/O devices and files is so great that many operating systems, including UNIX, merge the two into a combined file-device structure.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1956 | Added on Thursday, January 24, 2019, 08:55 PM

2.4.4 Information Maintenance
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1957-58 | Added on Thursday, January 24, 2019, 08:57 PM

Many system calls exist simply for the purpose of transferring information between the user program and the operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1958-59 | Added on Thursday, January 24, 2019, 08:58 PM

information about the system,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1960 | Added on Thursday, January 24, 2019, 08:58 PM

Another set of system calls is helpful in debugging a program.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1963-64 | Added on Thursday, January 24, 2019, 11:06 PM

Many operating systems provide a time profile of a program to indicate the amount of time that the program executes at a particular location or set of locations.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1967-68 | Added on Thursday, January 24, 2019, 11:06 PM

In addition, the operating system keeps information about all its processes, and system calls are used to access this information.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1969-70 | Added on Thursday, January 24, 2019, 11:06 PM

2.4.5 Communication
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1970-71 | Added on Thursday, January 24, 2019, 11:07 PM

There are two common models of interprocess communication: the message-passing model and the shared-memory model.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1972-74 | Added on Thursday, January 24, 2019, 11:39 PM

Before communication can take place, a connection must be opened. The name of the other communicator must be known, be it another process on the same system or a process on another computer connected by a communications network.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1974 | Added on Thursday, January 24, 2019, 11:42 PM

How is a connection opened to enable IPC in a message-passing model?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1975 | Added on Thursday, January 24, 2019, 11:47 PM

process name,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1976 | Added on Thursday, January 24, 2019, 11:47 PM

hostid and get processid system calls do this translation.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1976 | Added on Thursday, January 24, 2019, 11:47 PM

get hostid and get processid system calls
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1975-76 | Added on Thursday, January 24, 2019, 11:48 PM

each process has a process name, and this name is translated into an identifier by which the operating system can refer to the process. The get hostid and get processid system calls do this translation.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1979-80 | Added on Thursday, January 24, 2019, 11:55 PM

Most processes that will be receiving connections are special-purpose daemons, which are systems programs provided for that purpose.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1980-81 | Added on Thursday, January 24, 2019, 11:56 PM

The source of the communication, known as the client, and the receiving daemon, known as a server, then exchange messages by using read message and write message system calls.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1982-83 | Added on Thursday, January 24, 2019, 11:57 PM

In the shared-memory model, processes use shared memory create and shared memory attach system calls to create and gain access to regions of memory owned by other processes.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1984-85 | Added on Friday, January 25, 2019, 12:00 AM

Shared memory requires that two or more processes agree to remove this restriction.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1986-87 | Added on Friday, January 25, 2019, 12:00 AM

The processes are also responsible for ensuring that they are not writing to the same location simultaneously.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1989-92 | Added on Friday, January 25, 2019, 12:03 AM

Message passing is useful for exchanging smaller amounts of data, because no conflicts need be avoided. It is also easier to implement than is shared memory for intercomputer communication. Shared memory allows maximum speed and convenience of communication, since it can be done at memory transfer speeds when it takes place within a computer. Problems exist, however, in the areas of protection and synchronization between the processes sharing memory.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1992 | Added on Friday, January 25, 2019, 12:06 AM

What are the advantages and disadvantages of the message-passing and the shared memory models?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1992-93 | Added on Friday, January 25, 2019, 12:06 AM

2.4.6 Protection
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1869 | Added on Friday, January 25, 2019, 01:08 AM

3.5.7. Parentheses and Operator Hierarchy
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1869-70 | Added on Friday, January 25, 2019, 01:09 AM

Table 3.4 on the following page shows the precedence of operators.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1883 | Added on Friday, January 25, 2019, 01:14 AM

3.5.8. Enumerated Types
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1891-92 | Added on Friday, January 25, 2019, 01:17 AM

A variable of type Size can hold only one of the values listed in the type declaration, or the special value null that indicates that the variable is not set to any value at all.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1893-94 | Added on Friday, January 25, 2019, 01:18 AM

3.6. Strings Conceptually, Java strings are sequences of Unicode characters.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1895-96 | Added on Friday, January 25, 2019, 01:19 AM

Java does not have a built-in string type. Instead, the standard Java library contains a predefined class called, naturally enough, String.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1898 | Added on Friday, January 25, 2019, 01:19 AM

3.6.1. Substrings
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1901-2 | Added on Friday, January 25, 2019, 08:48 AM

The second parameter of substring is the first position that you do not want to copy.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1904-5 | Added on Friday, January 25, 2019, 08:49 AM

The string s.substring(a, b) always has length b - a.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1905-6 | Added on Friday, January 25, 2019, 08:50 AM

3.6.2. Concatenation Java,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1906-7 | Added on Friday, January 25, 2019, 08:50 AM

allows you to use + to join (concatenate) two strings.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1910-11 | Added on Friday, January 25, 2019, 08:53 AM

When you concatenate a string with a value that is not a string, the latter is converted to a string.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1917-18 | Added on Friday, January 25, 2019, 08:55 AM

3.6.3. Strings Are Immutable The String class gives no methods that let you change a character in an existing string.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1920 | Added on Friday, January 25, 2019, 08:56 AM

How are we going to modify the string?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1923-24 | Added on Friday, January 25, 2019, 08:57 AM

the documentation refers to the objects of the String class as immutable.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1929-30 | Added on Friday, January 25, 2019, 08:59 AM

But immutable strings have one great advantage: The compiler can arrange that strings are shared.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1931-32 | Added on Friday, January 25, 2019, 09:00 AM

If you copy a string variable, both the original and the copy share the same characters.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1958-60 | Added on Friday, January 25, 2019, 09:04 AM

3.6.4. Testing Strings for Equality To test whether two strings are equal, use the equals method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1964 | Added on Friday, January 25, 2019, 09:05 AM

use the equalsIgnoreCase method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1965-66 | Added on Friday, January 25, 2019, 09:06 AM

Do not use the == operator to test whether two strings are equal! It only determines whether or not the strings are stored in the same location.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1981-82 | Added on Friday, January 25, 2019, 09:09 AM

The Java method compareTo is the exact analog to strcmp.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1985-88 | Added on Friday, January 25, 2019, 09:10 AM

3.6.5. Empty and Null Strings The empty string "" is a string of length 0. You can test whether a string is empty by calling if (str.length() == 0) or if (str.equals(""))
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1990-91 | Added on Friday, January 25, 2019, 09:11 AM

a String variable can also hold a special value, called null, that indicates that no object is currently associated with the variable.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1996 | Added on Friday, January 25, 2019, 09:12 AM

3.6.5. Code Points and Code Units
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 1998-2001 | Added on Friday, January 25, 2019, 09:14 AM

the char data type is a code unit for representing Unicode code points in the UTF-16 encoding. The most commonly used Unicode characters can be represented with a single code unit. The supplementary characters require a pair of code units. The length method yields the number of code units required for a given string in the UTF-16 encoding.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2002-5 | Added on Friday, January 25, 2019, 09:15 AM

To get the true length—that is, the number of code points—call int cpCount = greeting.codePointCount(0, greeting.length()); The call s.charAt(n) returns the code unit at position n, where n is between 0 and s.length() – 1.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2008 | Added on Friday, January 25, 2019, 09:17 AM

To get at the ith code point, use the statements
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2009 | Added on Friday, January 25, 2019, 09:17 AM

int index =
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2009-10 | Added on Friday, January 25, 2019, 09:17 AM

greeting.offsetByCodePoints(0, i); int cp = greeting.codePointAt(index);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2021-22 | Added on Friday, January 25, 2019, 10:01 AM

int cp = sentence.codePointAt(i); if
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2024 | Added on Friday, January 25, 2019, 10:09 AM

i--; if
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2025-26 | Added on Friday, January 25, 2019, 10:10 AM

3.6.6. The String API
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 2100 | Added on Friday, January 25, 2019, 11:29 AM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2100 | Added on Friday, January 25, 2019, 11:29 AM

3.6.7. Reading the Online API Documentation
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2120 | Added on Friday, January 25, 2019, 11:33 AM

3.6.8. Building Strings
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2124-25 | Added on Friday, January 25, 2019, 11:33 AM

First, construct an empty string builder: StringBuilder builder = new StringBuilder();
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2127 | Added on Friday, January 25, 2019, 11:34 AM

Each time you need to add another part, call the append method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2129-31 | Added on Friday, January 25, 2019, 07:29 PM

When you are done building the string, call the toString method. You will get a String object with the character sequence contained in the builder. String completedString = builder.toString();
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2133-36 | Added on Friday, January 25, 2019, 07:30 PM

The StringBuilder class was introduced in JDK 5.0. Its predecessor, StringBuffer, is slightly less efficient, but it allows multiple threads to add or remove characters. If all string editing happens in a single thread (which is usually the case), you should use StringBuilder instead. The APIs of both classes are identical.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2164-65 | Added on Friday, January 25, 2019, 07:33 PM

3.7. Input and Output
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2169 | Added on Friday, January 25, 2019, 07:33 PM

3.7.1. Reading Input
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2171-73 | Added on Friday, January 25, 2019, 07:34 PM

To read console input, you first construct a Scanner that is attached to System.in: Scanner in = new Scanner(System.in);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2172 | Added on Friday, January 25, 2019, 07:35 PM

How to read console input?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 2173 | Added on Friday, January 25, 2019, 07:36 PM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2175 | Added on Friday, January 25, 2019, 07:36 PM

the nextLine method reads a line of input.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2177-79 | Added on Friday, January 25, 2019, 07:37 PM

To read a single word (delimited by whitespace), call String firstName = in.next(); To read an integer, use the nextInt method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2181 | Added on Friday, January 25, 2019, 07:37 PM

the nextDouble method reads the next floating-point number.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2185-86 | Added on Friday, January 25, 2019, 07:38 PM

The Scanner class is defined in the java.util package. Whenever you use a class that is not defined in the basic java.lang package, you need to use an import directive.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2189-90 | Added on Friday, January 25, 2019, 07:39 PM

The Scanner class is not suitable for reading a password from a console since the input is plainly visible to anyone.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2190 | Added on Friday, January 25, 2019, 07:39 PM

To read a password, use the following code:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2193-94 | Added on Friday, January 25, 2019, 07:39 PM

Console cons = System.console(); String username = cons.readLine("User name: "); char[] passwd = cons.readPassword("Password:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2210-11 | Added on Friday, January 25, 2019, 09:08 PM

java.util.Scanner 5.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2241 | Added on Friday, January 25, 2019, 09:12 PM

3.7.2. Formatting Output
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2246-47 | Added on Friday, January 25, 2019, 09:13 PM

Fortunately, Java SE 5.0 brought back the venerable printf method from the C library.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2255 | Added on Friday, January 25, 2019, 09:44 PM

Table 3.5. Conversions for printf
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2257-58 | Added on Friday, January 25, 2019, 11:29 PM

In addition, you can specify flags that control the appearance of the formatted output. Table 3.6 shows all flags.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2264-66 | Added on Friday, January 25, 2019, 11:37 PM

You can use the s conversion to format arbitrary objects. If an arbitrary object implements the Formattable interface, the object’s formatTo method is invoked. Otherwise, the toString method is invoked to turn the object into a string.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2268-70 | Added on Friday, January 25, 2019, 11:38 PM

You can use the static String.format method to create a formatted string without printing it: String message = String.format("Hello, %s. Next year, you'll be %d", name, age);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2271-72 | Added on Friday, January 25, 2019, 11:39 PM

the date and time formatting options of the printf method. Use a two-letter format, starting with t and ending in one of the letters of Table 3.7;
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2274 | Added on Friday, January 25, 2019, 11:40 PM

Table 3.7. Date and Time Conversion Characters
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2278-79 | Added on Friday, January 25, 2019, 11:49 PM

It would be a bit silly if you had to supply the date multiple times to format each part.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2279 | Added on Friday, January 25, 2019, 11:50 PM

What to do to format some parts of a date?

==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2290-91 | Added on Friday, January 25, 2019, 11:56 PM

Figure 3.6 shows a syntax diagram for format specifiers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2294-95 | Added on Friday, January 25, 2019, 11:57 PM

A number of the formatting rules are locale-specific. For example, in Germany, the group separator is a period, not a comma, and Monday is formatted as Montag.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2296-97 | Added on Friday, January 25, 2019, 11:58 PM

3.7.3. File Input and Output To read from a file, construct a Scanner object like this:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2299 | Added on Friday, January 25, 2019, 11:59 PM

If the file name contains backslashes,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2301-2 | Added on Saturday, January 26, 2019, 12:00 AM

To write to a file, construct a PrintWriter object. In the constructor, simply supply the file name:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2313 | Added on Saturday, January 26, 2019, 12:42 AM

When you specify a relative file name,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2313 | Added on Saturday, January 26, 2019, 12:43 AM

What happens when you specify a relative file name?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2324-25 | Added on Saturday, January 26, 2019, 12:46 AM

If you construct a Scanner with a file that does not exist or a PrintWriter with a file name that cannot be created, an exception occurs.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2335-36 | Added on Saturday, January 26, 2019, 12:48 AM

When you launch a program from a command shell, you can use the redirection syntax of your shell and attach any file to System.in and System.out:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2340-41 | Added on Saturday, January 26, 2019, 12:49 AM

java.util.Scanner 5.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2346-47 | Added on Saturday, January 26, 2019, 12:49 AM

java.io.PrintWriter 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2351 | Added on Saturday, January 26, 2019, 12:49 AM

java.nio.file.Paths 7
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2354 | Added on Saturday, January 26, 2019, 12:50 AM

3.8. Control Flow
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2362 | Added on Saturday, January 26, 2019, 12:52 AM

3.8.1. Block Scope
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1993-94 | Added on Saturday, January 26, 2019, 11:41 AM

Protection provides a mechanism for controlling access to the resources provided by a computer system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 1996-97 | Added on Saturday, January 26, 2019, 11:42 AM

Typically, system calls providing protection include set permission and get permission, which manipulate the permission settings of resources such as files and disks.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 1997 | Added on Saturday, January 26, 2019, 11:44 AM

What sys calls are provided to enable protection?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2000 | Added on Saturday, January 26, 2019, 11:45 AM

2.5 System Programs
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2004 | Added on Saturday, January 26, 2019, 11:47 AM

They can be divided into these categories:
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2005 | Added on Saturday, January 26, 2019, 11:47 AM

• File management.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2006 | Added on Saturday, January 26, 2019, 11:48 AM

• Status information.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2010 | Added on Saturday, January 26, 2019, 11:50 AM

• File modification.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2012-13 | Added on Saturday, January 26, 2019, 11:51 AM

• Programming-language support.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2014-15 | Added on Saturday, January 26, 2019, 11:52 AM

• Program loading and execution.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2017 | Added on Saturday, January 26, 2019, 11:57 AM

• Communications.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2020-21 | Added on Saturday, January 26, 2019, 12:01 PM

In addition to systems programs, most operating systems are supplied with programs that are useful in solving common problems or performing common operations.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2029 | Added on Saturday, January 26, 2019, 12:07 PM

2.6 Operating-System Design and Implementation
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2032 | Added on Saturday, January 26, 2019, 12:08 PM

2.6.1 Design Goals
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2033-34 | Added on Saturday, January 26, 2019, 12:09 PM

At the highest level, the design of the system will be affected by
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2034 | Added on Saturday, January 26, 2019, 12:10 PM

What are the factors affecting the design of os?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2036 | Added on Saturday, January 26, 2019, 12:10 PM

user goals and system goals.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2047 | Added on Saturday, January 26, 2019, 12:16 PM

these principles.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2047 | Added on Saturday, January 26, 2019, 12:16 PM

Principles for os design
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2048-49 | Added on Saturday, January 26, 2019, 12:17 PM

2.6.2 Mechanisms and Policies One important principle is the separation of policy from mechanism.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2048-50 | Added on Saturday, January 26, 2019, 12:17 PM

2.6.2 Mechanisms and Policies One important principle is the separation of policy from mechanism. Mechanisms determine how to do something; policies determine what will be done.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2053-54 | Added on Saturday, January 26, 2019, 12:20 PM

A general mechanism insensitive to changes in policy would be more desirable.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2053-54 | Added on Saturday, January 26, 2019, 12:20 PM

A general mechanism insensitive to changes in policy would be more desirable. A change in policy would then require redefinition of only certain parameters of the system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2057-59 | Added on Saturday, January 26, 2019, 12:23 PM

Microkernel-based operating systems (Section 2.7.3) take the separation of mechanism and policy to one extreme by implementing a basic set of primitive building blocks. These blocks are almost policy free, allowing more advanced mechanisms and policies to be added via user-created kernel modules or via user programs themselves.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2059 | Added on Saturday, January 26, 2019, 12:25 PM

What do microkernel sys do to separate mechanism from policy?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2062-63 | Added on Saturday, January 26, 2019, 12:26 PM

At the other extreme is a system such as Windows, in which both mechanism and policy are encoded in the system to enforce a global look and feel.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2064-65 | Added on Saturday, January 26, 2019, 12:28 PM

Policy decisions are important for all resource allocation.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2066 | Added on Saturday, January 26, 2019, 12:29 PM

Whenever the question is how rather than what, it is a mechanism that must be determined.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2067 | Added on Saturday, January 26, 2019, 12:29 PM

2.6.3 Implementation
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2073-74 | Added on Saturday, January 26, 2019, 12:32 PM

The advantages of using a higher-level language, or at least a systems-implementation language, for implementing operating systems are
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2074 | Added on Saturday, January 26, 2019, 12:34 PM

What are the advantages of using a higher-level language for implementing os?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2081-82 | Added on Saturday, January 26, 2019, 12:38 PM

The only possible disadvantages of implementing an operating system in a higher-level language are reduced speed and increased storage requirements.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2082 | Added on Saturday, January 26, 2019, 12:40 PM

What is the only possible disadvantage?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2088 | Added on Saturday, January 26, 2019, 12:42 PM

the memory manager and the CPU scheduler are probably the most critical routines.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2087-88 | Added on Saturday, January 26, 2019, 12:43 PM

only a small amount of the code is critical to high performance; the memory manager and the CPU scheduler are probably the most critical routines.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2090 | Added on Saturday, January 26, 2019, 12:43 PM

2.7 Operating-System Structure
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2092-93 | Added on Saturday, January 26, 2019, 12:44 PM

A common approach is to partition the task into small components rather than have one monolithic system. Each of these modules should be a well-defined portion of the system, with carefully defined inputs, outputs, and functions.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2093 | Added on Saturday, January 26, 2019, 12:47 PM

What is the common approach to engineer an os if it is to func properly and be modified easily?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2095 | Added on Saturday, January 26, 2019, 12:47 PM

2.7.1 Simple Structure
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 866 | Added on Saturday, January 26, 2019, 01:09 PM

chicanery
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 882 | Added on Saturday, January 26, 2019, 01:13 PM

crotch.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2096-97 | Added on Saturday, January 26, 2019, 01:28 PM

such systems started as small, simple, and limited systems and then grew beyond their original scope. MS-DOS is an example
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2104-5 | Added on Saturday, January 26, 2019, 01:30 PM

Another example of limited structuring is the original UNIX operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2099 | Added on Saturday, January 26, 2019, 01:32 PM

Figure 2.12 shows its structure.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2104-5 | Added on Saturday, January 26, 2019, 01:33 PM

Another example of limited structuring is the original UNIX operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2105-6 | Added on Saturday, January 26, 2019, 01:33 PM

the kernel and the system programs.
==========
Operating System Concepts (Greg Gagne)
- Bookmark Loc. 2106 | Added on Saturday, January 26, 2019, 01:34 PM


==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2105-8 | Added on Saturday, January 26, 2019, 01:34 PM

It consists of two separable parts: the kernel and the system programs. The kernel is further separated into a series of interfaces and device drivers, which have been added and expanded over the years as UNIX has evolved. We can view the traditional UNIX operating system as being layered, as shown in Figure 2.13.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2108 | Added on Saturday, January 26, 2019, 01:37 PM

How was the original Unix sys structured?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2114 | Added on Saturday, January 26, 2019, 01:52 PM

2.7.2 Layered Approach
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2118-19 | Added on Saturday, January 26, 2019, 03:12 PM

Information hiding is also important,
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2119 | Added on Saturday, January 26, 2019, 03:12 PM

Why is info hiding important?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2120-22 | Added on Saturday, January 26, 2019, 03:15 PM

A system can be made modular in many ways. One method is the layered approach, in which the operating system is broken into a number of layers (levels).
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2122 | Added on Saturday, January 26, 2019, 03:16 PM

What's the approach to modularize an os?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2124 | Added on Saturday, January 26, 2019, 03:17 PM

Figure 2.14 A layered operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2125-27 | Added on Saturday, January 26, 2019, 03:18 PM

An operating-system layer is an implementation of an abstract object made up of data and the operations that can manipulate those data. A typical operating-system layer—say, layer M—consists of data structures and a set of routines that can be invoked by higher-level layers.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2128-29 | Added on Saturday, January 26, 2019, 04:25 PM

The main advantage of the layered approach is simplicity of construction and debugging.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2129 | Added on Saturday, January 26, 2019, 04:25 PM

What is the main advantage of the layered approach?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2136-37 | Added on Saturday, January 26, 2019, 04:51 PM

The major difficulty with the layered approach involves appropriately defining the various layers.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2137 | Added on Saturday, January 26, 2019, 04:52 PM

What's the major issue wiith the layered aproach and why?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2150 | Added on Saturday, January 26, 2019, 05:02 PM

2.7.3 Microkernels
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2152-53 | Added on Saturday, January 26, 2019, 05:03 PM

the microkernel approach.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2153 | Added on Saturday, January 26, 2019, 05:05 PM

How the microkernel approach implemented?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2156-57 | Added on Saturday, January 26, 2019, 05:06 PM

The main function of the microkernel is to provide a communication facility between the client program and the various services that are also running in user space. Communication is provided by message passing,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2160 | Added on Saturday, January 26, 2019, 05:07 PM

One benefit of the microkernel approach is ease of extending the operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2162-63 | Added on Saturday, January 26, 2019, 05:09 PM

The microkernel also provides more security and reliability, since most services are running as user—rather than kernel—processes.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2165-66 | Added on Saturday, January 26, 2019, 05:10 PM

The Mach kernel maps UNIX system calls into messages to the appropriate user-level services.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2174 | Added on Saturday, January 26, 2019, 05:15 PM

2.7.4 Modules
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2174-76 | Added on Saturday, January 26, 2019, 05:16 PM

Perhaps the best current methodology for operating-system design involves using object-oriented programming techniques to create a modular kernel.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2176-77 | Added on Saturday, January 26, 2019, 11:36 PM

Here, the kernel has a set of core components and links in additional services either during boot time or during run time. Such a strategy uses dynamically loadable modules and is common in modern implementations of UNIX,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2177-79 | Added on Sunday, January 27, 2019, 02:20 AM

the Solaris operating system structure, shown in Figure 2.15, is organized around a core kernel with seven types of loadable kernel modules:
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2191-93 | Added on Sunday, January 27, 2019, 02:22 AM

The Apple Mac OS X operating system uses a hybrid structure. It is a layered system in which one layer consists of the Mach microkernel. The structure of Mac OS X appears in Figure 2.16.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2193 | Added on Sunday, January 27, 2019, 02:22 AM

The top layers include
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2194 | Added on Sunday, January 27, 2019, 02:23 AM

Below these layers is the kernel environment, which consists primarily of
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2194-95 | Added on Sunday, January 27, 2019, 02:23 AM

Mach provides
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2196 | Added on Sunday, January 27, 2019, 02:23 AM

The BSD component provides
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2199 | Added on Sunday, January 27, 2019, 02:24 AM

In addition to Mach and BSD, the kernel environment provides
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2201-2 | Added on Sunday, January 27, 2019, 09:53 AM

2.8 Virtual Machines
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2203 | Added on Sunday, January 27, 2019, 09:54 AM

The fundamental idea behind a virtual machine is
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2212-13 | Added on Sunday, January 27, 2019, 10:06 AM

2.8.1 History
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2223 | Added on Sunday, January 27, 2019, 10:11 AM

2.8.2 Benefits
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2225-26 | Added on Sunday, January 27, 2019, 10:12 AM

One important advantage is
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2228-29 | Added on Sunday, January 27, 2019, 10:13 AM

At the same time, however, there is no direct sharing of resources. Two approaches to provide sharing have been implemented.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2245-46 | Added on Sunday, January 27, 2019, 10:37 AM

A major advantage of virtual machines in production data-center use is system consolidation, which involves taking two or more separate systems and running them in virtual machines on one system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2256 | Added on Sunday, January 27, 2019, 10:41 AM

2.8.3 Simulation
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2260-61 | Added on Sunday, January 27, 2019, 10:46 AM

Another methodology is simulation, in which the host system has one system architecture and the guest system was compiled for a different architecture.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2263-64 | Added on Sunday, January 27, 2019, 10:49 AM

Emulation can increase the life of programs and allow us to explore old architectures without having an actual old machine, but its major challenge is performance.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2266-67 | Added on Sunday, January 27, 2019, 10:50 AM

Another challenge is that it is difficult to create a correct emulator because, in essence, this involves writing an entire CPU in software.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2267-68 | Added on Sunday, January 27, 2019, 10:50 AM

2.8.4 Para-virtualization
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2269-70 | Added on Sunday, January 27, 2019, 10:52 AM

Rather than try to trick a guest operating system into believing it has a system to itself, para-virtualization presents the guest with a system that is similar but not identical to the guest’s preferred system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2279 | Added on Sunday, January 27, 2019, 10:54 AM

2.8.5 Implementation
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2281-82 | Added on Sunday, January 27, 2019, 10:56 AM

The virtual-machine software can run in kernel mode, since it is the operating system. The virtual machine itself can execute in only user mode.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2286 | Added on Sunday, January 27, 2019, 10:59 AM

Such a transfer can be accomplished as follows.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2286 | Added on Sunday, January 27, 2019, 11:01 AM

How's a sys call made by a prog running on a VM in virtual user mode processed on the real machine?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2296-97 | Added on Sunday, January 27, 2019, 11:24 AM

All major general-purpose CPUs provide some amount of hardware support for virtualization.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2302 | Added on Sunday, January 27, 2019, 11:25 AM

2.8.6 Examples
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2305 | Added on Sunday, January 27, 2019, 11:26 AM

the VMware Workstation and the Java virtual machine.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2307 | Added on Sunday, January 27, 2019, 11:27 AM

2.8.6.1 VMware
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2308-9 | Added on Sunday, January 27, 2019, 11:28 AM

Most of the virtualization techniques discussed in this section require virtualization to be supported by the kernel. Another method involves writing the virtualization tool to run in user mode as an application on top of the operating system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2318 | Added on Sunday, January 27, 2019, 11:31 AM

Figure 2.19 VMware architecture.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2323 | Added on Sunday, January 27, 2019, 11:32 AM

2.8.6.2 The Java Virtual Machine
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2327-28 | Added on Sunday, January 27, 2019, 11:35 AM

For each Java class, the compiler produces an architecture-neutral bytecode output (.class) file that will run on any implementation of the JVM.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2328-30 | Added on Sunday, January 27, 2019, 11:36 AM

The JVM is a specification for an abstract computer. It consists of a class loader and a Java interpreter that executes the architecture-neutral bytecodes, as diagrammed in Figure 2.20.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2340 | Added on Sunday, January 27, 2019, 11:38 AM

A faster software technique is to use a just-in-time (JIT) compiler.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2343-44 | Added on Sunday, January 27, 2019, 11:39 AM

THE .NET FRAMEWORK
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2342-44 | Added on Sunday, January 27, 2019, 11:40 AM

A technique that is potentially even faster is to run the JVM in hardware on a THE .NET FRAMEWORK
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2344-46 | Added on Sunday, January 27, 2019, 11:40 AM

The .NET Framework is a collection of technologies, including a set of class libraries, and an execution environment that come together to provide a platform for developing software.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2349-50 | Added on Sunday, January 27, 2019, 11:41 AM

At the core of the .NET Framework is the Common Language Runtime (CLR). The CLR is the implementation of the .NET virtual machine.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2358-59 | Added on Sunday, January 27, 2019, 11:43 AM

Figure 2.21 Architecture of the CLR for the .NET Framework.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2342-43 | Added on Sunday, January 27, 2019, 11:45 AM

A technique that is potentially even faster is to run the JVM in hardware on a
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2360-61 | Added on Sunday, January 27, 2019, 11:46 AM

special Java chip that executes the Java bytecode operations as native code, thus bypassing the need for either a software interpreter or a just-in-time compiler.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2343-44 | Added on Sunday, January 27, 2019, 11:46 AM

THE .NET FRAMEWORK
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2344-46 | Added on Sunday, January 27, 2019, 11:46 AM

The .NET Framework is a collection of technologies, including a set of class libraries, and an execution environment that come together to provide a platform for developing software.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2349-50 | Added on Sunday, January 27, 2019, 11:46 AM

At the core of the .NET Framework is the Common Language Runtime (CLR). The CLR is the implementation of the .NET virtual machine.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2358-59 | Added on Sunday, January 27, 2019, 11:47 AM

Figure 2.21 Architecture of the CLR for the .NET Framework.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2364 | Added on Sunday, January 27, 2019, 12:09 PM

A block or compound statement is any number of simple Java statements surrounded by a pair of braces.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2368-69 | Added on Sunday, January 27, 2019, 12:10 PM

However, you may not declare identically named variables in two nested blocks.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2377 | Added on Sunday, January 27, 2019, 12:11 PM

3.8.2. Conditional Statements
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2412-13 | Added on Sunday, January 27, 2019, 12:21 PM

3.8.3. Loops
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2473-74 | Added on Sunday, January 27, 2019, 12:30 PM

3.8.4. Determinate Loops
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2534-35 | Added on Sunday, January 27, 2019, 01:00 PM

3.8.5. Multiple Selections—The switch Statement
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2553-55 | Added on Sunday, January 27, 2019, 01:06 PM

If you like the switch statement better than we do, consider compiling your code with the -Xlint:fallthrough option, like this: javac -Xlint:fallthrough Test.java
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2558-59 | Added on Sunday, January 27, 2019, 01:07 PM

If you actually want to use the fallthrough behavior, tag the surrounding method with the annotation @SuppressWarnings("fallthrough"). Then no warnings will
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2561 | Added on Sunday, January 27, 2019, 01:08 PM

A case label can be
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2561 | Added on Sunday, January 27, 2019, 01:09 PM

What can be used as a case label?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2573 | Added on Sunday, January 27, 2019, 01:11 PM

3.8.6. Statements That Break Control Flow
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2575-76 | Added on Sunday, January 27, 2019, 01:12 PM

for example, the famous article of Donald Knuth called “Structured Programming with goto statements”).
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2577-78 | Added on Sunday, January 27, 2019, 01:12 PM

The Java designers agreed and even added a new statement, the labeled break, to support this programming style.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2590-91 | Added on Sunday, January 27, 2019, 01:15 PM

Unlike C++, Java also offers a labeled break statement that lets you break out of multiple nested loops.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2593-94 | Added on Sunday, January 27, 2019, 01:16 PM

Notice that the label must precede the outermost loop out of which you want to break. It also must be followed by a colon.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2603-4 | Added on Sunday, January 27, 2019, 01:18 PM

As with any use of the break statement, you then need to test whether the loop exited normally or as a result of a break.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2606-10 | Added on Sunday, January 27, 2019, 01:19 PM

Curiously, you can apply a label to any statement, even an if statement or a block statement, like this: label: {   . . .   if (condition) break label; // exits block   . . . } // jumps here when the break statement executes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2626-27 | Added on Sunday, January 27, 2019, 01:22 PM

There is also a labeled form of the continue statement that jumps to the header of the loop with the matching label.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2631 | Added on Sunday, January 27, 2019, 01:22 PM

3.9. Big Numbers
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2632-33 | Added on Sunday, January 27, 2019, 01:23 PM

a couple of handy classes in the java.math package: BigInteger and BigDecimal.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2632-35 | Added on Sunday, January 27, 2019, 01:24 PM

you can turn to a couple of handy classes in the java.math package: BigInteger and BigDecimal. These are classes for manipulating numbers with an arbitrarily long sequence of digits. The BigInteger class implements arbitrary-precision integer arithmetic, and BigDecimal does the same for floating-point numbers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2632-33 | Added on Sunday, January 27, 2019, 01:25 PM

a couple of handy classes in the java.math package: BigInteger and BigDecimal.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2633 | Added on Sunday, January 27, 2019, 01:26 PM

What are BigInteger and BigDecimal for?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2635-36 | Added on Sunday, January 27, 2019, 01:26 PM

Use the static valueOf method to turn an ordinary number into a big number: BigInteger a = BigInteger.valueOf(100);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2636 | Added on Sunday, January 27, 2019, 01:29 PM

What's the method we use to turn an ordinary number into a big number?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2637-38 | Added on Sunday, January 27, 2019, 01:30 PM

you cannot use the familiar mathematical operators such as + and * to combine big numbers. Instead, you must use methods such as add and multiply in the big number
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2654 | Added on Sunday, January 27, 2019, 01:32 PM

java.math.BigInteger 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2669 | Added on Sunday, January 27, 2019, 01:33 PM

java.math.BigDecimal 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2700 | Added on Sunday, January 27, 2019, 01:45 PM

3.10. Arrays
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2708-9 | Added on Sunday, January 27, 2019, 01:49 PM

The array length need not be a constant: new int[n] creates an array of length n.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2721-23 | Added on Sunday, January 27, 2019, 01:52 PM

When you create an array of numbers, all elements are initialized with zero. Arrays of boolean are initialized with false. Arrays of objects are initialized with the special value null, which indicates that they do not (yet) hold any objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2723 | Added on Sunday, January 27, 2019, 01:53 PM

What's an array initialized to by default at the time of its creation?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2736 | Added on Sunday, January 27, 2019, 01:55 PM

3.10.1. The “for each” Loop
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2738-40 | Added on Sunday, January 27, 2019, 01:56 PM

The enhanced for loop for (variable : collection) statement sets the given variable to each element of the collection and then executes the statement
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2740-41 | Added on Sunday, January 27, 2019, 01:57 PM

The collection expression must be an array or an object of a class that implements the Iterable interface, such as ArrayList.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2752-53 | Added on Sunday, January 27, 2019, 01:59 PM

The loop variable of the “for each” loop traverses the elements of the array, not the index values.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2759-62 | Added on Sunday, January 27, 2019, 01:59 PM

The call Arrays.toString(a) returns a string containing the array elements, enclosed in brackets and separated by commas, such as "[2, 3, 5, 7, 11, 13]". To print the array, simply call System.out.println(Arrays.toString(a));
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2763 | Added on Sunday, January 27, 2019, 02:00 PM

3.10.2. Array Initializers and Anonymous Arrays
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2763-64 | Added on Sunday, January 27, 2019, 02:01 PM

Java has a shorthand to create an array object and supply initial values at the same time.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2764 | Added on Sunday, January 27, 2019, 02:02 PM

What's the shorthand to create an array object?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2766-67 | Added on Sunday, January 27, 2019, 02:03 PM

You can even initialize an anonymous array: new int[] { 17, 19, 23, 29, 31, 37 }
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2769-70 | Added on Sunday, January 27, 2019, 02:04 PM

You can use this syntax to reinitialize an array without creating a new variable. For example, smallPrimes = new int[] { 17, 19, 23, 29, 31, 37 };
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2774-78 | Added on Sunday, January 27, 2019, 02:05 PM

It is legal to have arrays of length 0. Such an array can be useful if you write a method that computes an array result and the result happens to be empty. Construct an array of length 0 as new elementType[0] Note that an array of length 0 is not the same as null.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2779 | Added on Sunday, January 27, 2019, 02:06 PM

3.10.3. Array Copying
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 2780 | Added on Sunday, January 27, 2019, 02:06 PM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2780 | Added on Sunday, January 27, 2019, 02:06 PM

You can copy one array variable into another, but then both variables refer to the same array:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2780 | Added on Sunday, January 27, 2019, 02:07 PM

What happens when you copy one array variable into another?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2783-85 | Added on Sunday, January 27, 2019, 02:08 PM

If you actually want to copy all values of one array into a new array, you use the copyOf method in the Arrays class: int[] copiedLuckyNumbers = Arrays.copyOf(luckyNumbers, luckyNumbers.length);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 2783 | Added on Sunday, January 27, 2019, 02:10 PM

What method is used to copy all values of one array into a new array?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2787-88 | Added on Sunday, January 27, 2019, 02:11 PM

A common use of this method is to increase the size of an array: luckyNumbers = Arrays.copyOf(luckyNumbers, 2 * luckyNumbers.length);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2803-4 | Added on Sunday, January 27, 2019, 02:12 PM

3.10.4. Command-Line Parameters
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2819-20 | Added on Sunday, January 27, 2019, 09:28 PM

In the main method of a Java program, the name of the program is not stored in the args array.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2824 | Added on Sunday, January 27, 2019, 09:29 PM

3.10.5. Array Sorting
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2824-25 | Added on Sunday, January 27, 2019, 09:29 PM

To sort an array of numbers, you can use one of the sort methods in the Arrays class:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2826 | Added on Sunday, January 27, 2019, 09:30 PM

Arrays.sort(a)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2856-57 | Added on Sunday, January 27, 2019, 09:35 PM

The Math.random method returns a random floating-point number that is between 0 (inclusive) and 1 (exclusive).
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2868 | Added on Sunday, January 27, 2019, 09:37 PM

java.util.Arrays 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2902 | Added on Monday, January 28, 2019, 12:40 AM

3.10.6. Multidimensional Arrays
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2912-13 | Added on Monday, January 28, 2019, 12:45 AM

In other cases, if you know the array elements, you can use a shorthand notation for initializing a multidimensional array without a call to new.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2934-36 | Added on Monday, January 28, 2019, 01:36 AM

To print out a quick-and-dirty list of the elements of a two-dimensional array, call System.out.println(Arrays.deepToString(a));
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2964 | Added on Monday, January 28, 2019, 01:41 AM

3.10.7. Ragged Arrays
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2965-66 | Added on Monday, January 28, 2019, 01:42 AM

Java has no multidimensional arrays at all, only one-dimensional arrays. Multidimensional arrays are faked as “arrays of arrays.”
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 2974 | Added on Monday, January 28, 2019, 01:43 AM

It is also easy to make “ragged” arrays—that is, arrays in which different rows have different lengths.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3013-14 | Added on Monday, January 28, 2019, 11:25 AM

Instead, an array of ten pointers is allocated:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3005-21 | Added on Monday, January 28, 2019, 11:27 AM

In C++, the Java declaration double[][] balances = new double[10][6]; // Java is not the same as double balances[10][6]; // C++ or even double (*balances)[6] = new double[10][6]; // C++ Instead, an array of ten pointers is allocated: double** balances = new double*[10]; // C++ Then, each element in the pointer array is filled with an array of six numbers: for (i = 0; i < 10; i++)    balances[i] = new double[6]; Mercifully, this loop is automatic when you ask for a new double[10][6]. When you want ragged arrays, you allocate the row arrays separately.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3023 | Added on Monday, January 28, 2019, 11:29 AM

Chapter 4. Objects and Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3042-43 | Added on Monday, January 28, 2019, 11:37 AM

4.1. Introduction to Object-Oriented Programming
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3051 | Added on Monday, January 28, 2019, 11:41 AM

Algorithms + Data Structures = Programs
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3061 | Added on Monday, January 28, 2019, 12:23 PM

4.1.1. Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3061 | Added on Monday, January 28, 2019, 12:24 PM

A class is the template or blueprint from which objects are made.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3066 | Added on Monday, January 28, 2019, 12:25 PM

Encapsulation (sometimes called information hiding) is a key concept in working with objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3067-68 | Added on Monday, January 28, 2019, 12:26 PM

The bits of data in an object are called its instance fields, and the procedures that operate on the data are called its methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3067 | Added on Monday, January 28, 2019, 12:28 PM

What're instance fields and methods?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3069-70 | Added on Monday, January 28, 2019, 12:28 PM

The set of those values is the current state of the object. Whenever you invoke a method on an object, its state may change.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3070 | Added on Monday, January 28, 2019, 12:29 PM

What's the state of an object?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3071-72 | Added on Monday, January 28, 2019, 12:31 PM

Programs should interact with object data only through the object’s methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3075-76 | Added on Monday, January 28, 2019, 12:43 PM

Java, in fact, comes with a “cosmic superclass” called Object. All other classes extend this class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3079 | Added on Monday, January 28, 2019, 12:45 PM

4.1.2. Objects
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3080 | Added on Monday, January 28, 2019, 12:46 PM

three key characteristics
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3080 | Added on Monday, January 28, 2019, 12:47 PM

What're the three key characteristics of objects?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3090-91 | Added on Monday, January 28, 2019, 03:53 PM

Notice that the individual objects that are instances of a class always differ in their identity and usually differ in their state.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3094 | Added on Monday, January 28, 2019, 03:53 PM

4.1.3. Identifying Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3097-98 | Added on Monday, January 28, 2019, 03:56 PM

A simple rule of thumb in identifying classes is to look for nouns in the problem analysis. Methods, on the other hand, correspond to verbs.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3108-9 | Added on Monday, January 28, 2019, 03:59 PM

4.1.4. Relationships between Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3109-12 | Added on Monday, January 28, 2019, 04:00 PM

The most common relationships between classes are • Dependence (“uses–a”) • Aggregation (“has–a”) • Inheritance (“is–a”)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3112 | Added on Monday, January 28, 2019, 04:00 PM

What're the most common rel bt classes?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3116 | Added on Monday, January 28, 2019, 04:04 PM

Try to minimize the number of classes that depend on each other.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3118 | Added on Monday, January 28, 2019, 04:04 PM

In software engineering terminology, you want to minimize the coupling between classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3133-34 | Added on Monday, January 28, 2019, 04:11 PM

Many programmers use the UML (Unified Modeling Language) notation to draw class diagrams that describe the relationships between classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3126 | Added on Monday, January 28, 2019, 04:12 PM

Table 4.1. UML notation for class relationships
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3137 | Added on Monday, January 28, 2019, 04:13 PM

4.2. Using Predefined Classes
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2361-62 | Added on Monday, January 28, 2019, 07:31 PM

2.9 Operating-System Debugging
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2363-65 | Added on Monday, January 28, 2019, 07:32 PM

Performance problems are considered bugs, so debugging can also include performance tuning, which seeks to improve performance by removing bottlenecks in the processing taking place within a system.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2366-67 | Added on Monday, January 28, 2019, 07:33 PM

2.9.1 Failure Analysis
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2367-70 | Added on Monday, January 28, 2019, 07:34 PM

If a process fails, most operating systems write the error information to a log file to alert system operators or users that the problem occurred. The operating system can also take a core dump—a capture of the memory (referred to as the “core” in the early days of computing) of the process. This core image is stored in a file for later analysis.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2367 | Added on Monday, January 28, 2019, 07:35 PM

What're the facilities provided by an os for debugging sys failure?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2370 | Added on Monday, January 28, 2019, 07:36 PM

Running programs and core dumps can be probed by a debugger,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2373 | Added on Monday, January 28, 2019, 07:38 PM

A kernel failure is called a crash.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2373-74 | Added on Monday, January 28, 2019, 07:39 PM

A kernel failure is called a crash. As with a process failure, error information is saved to a log file, and the memory state is saved to a crash dump.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2380 | Added on Monday, January 28, 2019, 07:41 PM

2.9.2 Performance Tuning
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2381-83 | Added on Monday, January 28, 2019, 07:41 PM

Code must be added to compute and display measures of system behavior. In a number of systems, the operating system does this task by producing trace listings of system behavior. All interesting events are logged with their time and important parameters and are written to a file.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2389-91 | Added on Monday, January 28, 2019, 07:43 PM

Another approach to performance tuning is to include interactive tools with the system that allow users and administrators to question the state of various components of the system to look for bottlenecks. The UNIX command top displays resources used on the system, as well as a sorted list of the “top” resource-using processes. Other tools display the state of disk I/O, memory allocation, and network traffic.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2394-96 | Added on Monday, January 28, 2019, 07:45 PM

The cycle of enabling tracing as system problems occur and analyzing the traces later is being broken by a new generation of kernel-enabled performance analysis tools. Further, these tools are not single-purpose or merely for sections of code that were written to emit debugging data. The Solaris 10 DTrace dynamic tracing facility is a leading example of such a tool.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2397 | Added on Monday, January 28, 2019, 07:46 PM

2.9.3 DTrace
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2397-99 | Added on Monday, January 28, 2019, 07:48 PM

DTrace is a facility that dynamically adds probes to a running system, both in user processes and in the kernel. These probes can be queried via the D programming language to determine an astonishing amount about the kernel, the system state, and process activities.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2410-11 | Added on Monday, January 28, 2019, 07:56 PM

Profiling, which periodically samples the instruction pointer to determine which code is being executed, can show statistical trends but not individual activities.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2419-20 | Added on Monday, January 28, 2019, 07:59 PM

DTrace is composed of a compiler, a framework, providers of probes written within that framework, and consumers of those probes. DTrace providers create probes.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2423 | Added on Monday, January 28, 2019, 08:01 PM

Different providers create different kinds of probes.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2425-26 | Added on Monday, January 28, 2019, 08:01 PM

DTrace features a compiler that generates a byte code that is run in the kernel. This code is assured to be “safe” by the compiler.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2426-27 | Added on Monday, January 28, 2019, 08:02 PM

Only users with the DTrace “privileges” (or “root” users) are allowed to use DTrace, as it can retrieve private kernel data (and modify data if requested).
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2429-30 | Added on Monday, January 28, 2019, 08:03 PM

A DTrace consumer is code that is interested in a probe and its results. A consumer requests that the provider create one or more probes. When a probe fires, it emits data that are managed by the kernel.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2429-31 | Added on Monday, January 28, 2019, 08:04 PM

A DTrace consumer is code that is interested in a probe and its results. A consumer requests that the provider create one or more probes. When a probe fires, it emits data that are managed by the kernel. Within the kernel, actions called enabling control blocks, or ECBs, are performed when probes fire.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2452-53 | Added on Monday, January 28, 2019, 08:14 PM

2.10 Operating-System Generation
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2456 | Added on Monday, January 28, 2019, 08:15 PM

system generation (SYSGEN).
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2456 | Added on Monday, January 28, 2019, 08:16 PM

What's known as SYSGEN?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2460 | Added on Monday, January 28, 2019, 08:17 PM

The following kinds of information must be determined.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2460 | Added on Monday, January 28, 2019, 08:18 PM

What kinds of info must be determined to generate an os?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2470-71 | Added on Monday, January 28, 2019, 08:24 PM

Once this information is determined, it can be used in several ways.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2470 | Added on Monday, January 28, 2019, 08:25 PM

How can the info be used?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2470-71 | Added on Monday, January 28, 2019, 08:26 PM

Once this information is determined, it can be used in several ways.
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2471 | Added on Monday, January 28, 2019, 08:27 PM

In what ways can the info gathered be used to build a system?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2470 | Added on Monday, January 28, 2019, 08:27 PM

on.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2483 | Added on Monday, January 28, 2019, 08:29 PM

2.11 System Boot
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2484-85 | Added on Monday, January 28, 2019, 08:29 PM

But how does the hardware know where the kernel is or how to load that kernel?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2485-87 | Added on Monday, January 28, 2019, 08:30 PM

On most computer systems, a small piece of code known as the bootstrap program or bootstrap loader locates the kernel, loads it into main memory, and starts its execution.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2488-90 | Added on Monday, January 28, 2019, 08:32 PM

When a CPU receives a reset event—for instance, when it is powered up or rebooted—the instruction register is loaded with a predefined memory location, and execution starts there. At that location is the initial bootstrap program. This program is in the form of read-only memory (ROM),
==========
Operating System Concepts (Greg Gagne)
- Note Loc. 2490 | Added on Monday, January 28, 2019, 08:32 PM

What happens at sys startup?
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2498 | Added on Monday, January 28, 2019, 08:40 PM

erasable programmable read-only memory (EPROM),
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2499 | Added on Monday, January 28, 2019, 08:40 PM

firmware,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2502-5 | Added on Monday, January 28, 2019, 08:42 PM

For large operating systems (including most general-purpose operating systems like Windows, Mac OS X, and UNIX) or for systems that change frequently, the bootstrap loader is stored in firmware, and the operating system is on disk. In this case, the bootstrap runs diagnostics and has a bit of code that can read a single block at a fixed location (say block zero) from disk into memory and execute the code from that boot block.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2507 | Added on Monday, January 28, 2019, 08:43 PM

GRUB is an example of an open-source bootstrap program for Linux systems.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2512 | Added on Monday, January 28, 2019, 08:44 PM

2.12 Summary
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2513 | Added on Monday, January 28, 2019, 08:44 PM

system calls
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2514 | Added on Monday, January 28, 2019, 08:44 PM

the command interpreter or shell
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2516-17 | Added on Monday, January 28, 2019, 08:45 PM

The types of requests vary according to level.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2517 | Added on Monday, January 28, 2019, 08:45 PM

The system-call level
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2517-18 | Added on Monday, January 28, 2019, 08:46 PM

Higher-level requests, satisfied by the command interpreter or system programs, are translated into a sequence of system calls.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2520 | Added on Monday, January 28, 2019, 08:46 PM

Once the system services are defined, the structure of the operating system can be developed.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2522 | Added on Monday, January 28, 2019, 08:47 PM

The design of a new operating system
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2522-23 | Added on Monday, January 28, 2019, 08:47 PM

the goals of the system be well defined before the design begins.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2524-25 | Added on Monday, January 28, 2019, 08:47 PM

modularity is important.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2525 | Added on Monday, January 28, 2019, 08:48 PM

Designing a system as a sequence of layers or using a microkernel is considered a good technique.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2525 | Added on Monday, January 28, 2019, 08:48 PM

The virtual-machine concept
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2527-28 | Added on Monday, January 28, 2019, 08:49 PM

the entire operating-system design cycle,
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2528 | Added on Monday, January 28, 2019, 08:49 PM

separate policy decisions from implementation details (mechanisms).
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2530 | Added on Monday, January 28, 2019, 08:49 PM

systems-implementation language or in a higher-level language.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2531 | Added on Monday, January 28, 2019, 08:50 PM

system generation.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2532-33 | Added on Monday, January 28, 2019, 08:50 PM

Debugging process and kernel failures can be accomplished through the use of debuggers and other tools that analyze core dumps.
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2533 | Added on Monday, January 28, 2019, 08:51 PM

DTrace
==========
Operating System Concepts (Greg Gagne)
- Highlight Loc. 2534-35 | Added on Monday, January 28, 2019, 08:51 PM

the bootstrap program in firmware.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3144-45 | Added on Tuesday, January 29, 2019, 09:23 AM

4.2.1. Objects and Object Variables
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3146-47 | Added on Tuesday, January 29, 2019, 09:24 AM

use constructors to construct new instances. A constructor is a special method whose purpose is to construct and initialize objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3147 | Added on Tuesday, January 29, 2019, 09:25 AM

What's a constructor?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3158-59 | Added on Tuesday, January 29, 2019, 09:31 AM

Constructors always have the same name as the class name.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3175-76 | Added on Tuesday, January 29, 2019, 09:41 AM

It is important to realize that the variable deadline is not an object and, in fact, does not even refer to an object yet.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3176 | Added on Tuesday, January 29, 2019, 09:41 AM

What's the diff btwn an object var and an obj?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3186 | Added on Tuesday, January 29, 2019, 09:50 AM

The return value of the new operator is also a reference.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3186 | Added on Tuesday, January 29, 2019, 09:50 AM

What is the ret val of a new op?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3189-90 | Added on Tuesday, January 29, 2019, 11:34 AM

You can explicitly set an object variable to null to indicate that it currently refers to no object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3195-96 | Added on Tuesday, January 29, 2019, 11:35 AM

Local variables are not automatically initialized to null. You must initialize them, either by calling new or by setting them to null.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3198-3200 | Added on Tuesday, January 29, 2019, 11:37 AM

But in C++ there are no null references, and references cannot be assigned. You should think of Java object variables as analogous to object pointers in C++.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3209-12 | Added on Tuesday, January 29, 2019, 11:38 AM

The equivalent of the Java null reference is the C++ NULL pointer. All Java objects live on the heap. When an object contains another object variable, it contains just a pointer to yet another heap object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3219 | Added on Tuesday, January 29, 2019, 11:40 AM

In Java, you must use the clone method to get a complete copy of an object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3221 | Added on Tuesday, January 29, 2019, 11:40 AM

4.2.2. The GregorianCalendar Class of the Java Library
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3222-23 | Added on Tuesday, January 29, 2019, 11:41 AM

An instance of the Date class has a state, namely a particular point in time.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3236-37 | Added on Tuesday, January 29, 2019, 11:47 AM

Therefore, the standard Java library contains two separate classes: the Date class, which represents a point in time, and the GregorianCalendar class, which expresses dates in the familiar calendar notation.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3240 | Added on Tuesday, January 29, 2019, 11:52 AM

High ..., low coupling
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3241-42 | Added on Tuesday, January 29, 2019, 11:53 AM

The Date class has only a small number of methods that allow you to compare two points in time. For example, the before and after methods tell you if one point in time comes before or after another:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3244 | Added on Tuesday, January 29, 2019, 11:54 AM

if (today.before(birthday))    System.out.println("Still time to shop for a gift.");
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3255-56 | Added on Tuesday, January 29, 2019, 11:56 AM

new GregorianCalendar() constructs a new object that represents the date and time at which the object was constructed.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3256-58 | Added on Tuesday, January 29, 2019, 11:56 AM

You can construct a calendar object for midnight on a specific date by supplying year, month, and day: new GregorianCalendar(1999, 11, 31)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3258 | Added on Tuesday, January 29, 2019, 11:56 AM

Somewhat curiously, the months are counted from 0.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3259-63 | Added on Tuesday, January 29, 2019, 11:58 AM

For greater clarity, there are constants like Calendar.DECEMBER: new GregorianCalendar(1999, Calendar.DECEMBER, 31) You can also set the time: new GregorianCalendar(1999, Calendar.DECEMBER, 31, 23, 59, 59) Of course, you will usually want to store the constructed object in an object variable: GregorianCalendar deadline = new GregorianCalendar(. . .);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3267 | Added on Tuesday, January 29, 2019, 04:07 PM

4.2.3. Mutator and Accessor Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3270 | Added on Tuesday, January 29, 2019, 04:09 PM

What's the job of a calendar?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3271 | Added on Tuesday, January 29, 2019, 04:12 PM

What merhod to use to query the date, weekday, month, or year of a certain point in time? And how to use it?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3276 | Added on Tuesday, January 29, 2019, 04:14 PM

To change the state, call the set method:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3279-80 | Added on Tuesday, January 29, 2019, 04:14 PM

There is also a convenience method to set the year, month, and day with a single call:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3281-82 | Added on Tuesday, January 29, 2019, 04:14 PM

Finally, you can add a number of days, weeks, months, and so on, to a given calendar object:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3283 | Added on Tuesday, January 29, 2019, 04:14 PM

If you add a negative number, then the calendar is moved backwards.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3286 | Added on Tuesday, January 29, 2019, 04:16 PM

What're mutator and accessor methods?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3295 | Added on Tuesday, January 29, 2019, 04:19 PM

What methods are particularly useful for converting btw the Date class and the Gregorian class?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3383 | Added on Tuesday, January 29, 2019, 07:58 PM

java.util.GregorianCalendar 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3420-21 | Added on Tuesday, January 29, 2019, 11:21 PM

java.text.DateFormatSymbols 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3428 | Added on Tuesday, January 29, 2019, 11:23 PM

4.3. Defining Your Own Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3432-33 | Added on Tuesday, January 29, 2019, 11:24 PM

4.3.1. An Employee Class
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3486-87 | Added on Tuesday, January 29, 2019, 11:50 PM

the name of the file must match the name of the public class. You can only have one public class in a source file, but you can have any number of nonpublic classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3493 | Added on Wednesday, January 30, 2019, 12:41 AM

4.3.2. Use of Multiple Source Files
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3506-7 | Added on Wednesday, January 30, 2019, 12:43 AM

you can think of the Java compiler as having the make functionality already built in.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3508 | Added on Wednesday, January 30, 2019, 12:43 AM

4.3.3. Dissecting the Employee Class
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3514 | Added on Wednesday, January 30, 2019, 12:45 AM

The keyword public means that any method in any class can call the method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3514 | Added on Wednesday, January 30, 2019, 12:46 AM

What does the keyword public placed b4 a method header mean?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3517 | Added on Wednesday, January 30, 2019, 12:51 AM

What does the key word private mean?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3526 | Added on Wednesday, January 30, 2019, 12:53 AM

Classes will often contain instance fields of class type.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3527 | Added on Wednesday, January 30, 2019, 12:53 AM

4.3.4. First Steps with Constructors
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3556-57 | Added on Wednesday, January 30, 2019, 12:57 AM

Be careful not to introduce local variables with the same names as the instance fields.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3566 | Added on Wednesday, January 30, 2019, 12:58 AM

4.3.5. Implicit and Explicit Parameters
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3574 | Added on Wednesday, January 30, 2019, 01:02 AM

What is the implicit param and what are the explicit param(s) in a method?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3594-95 | Added on Wednesday, January 30, 2019, 01:04 AM

In Java, all methods are defined inside the class itself. This does not make them inline. Finding opportunities for inline replacement is the job of the Java virtual machine.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3597 | Added on Wednesday, January 30, 2019, 01:05 AM

4.3.6. Benefits of Encapsulation
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3619-20 | Added on Wednesday, January 30, 2019, 01:10 AM

Mutator methods can perform error checking, whereas code that simply assigns to a field may not go into the trouble.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3622-23 | Added on Wednesday, January 30, 2019, 01:11 AM

Be careful not to write accessor methods that return references to mutable objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3639-40 | Added on Wednesday, January 30, 2019, 01:13 AM

If you need to return a reference to a mutable object, you should clone it first. A clone is an exact copy of an object stored in a new location.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3639 | Added on Wednesday, January 30, 2019, 01:14 AM

What should be done to return a mutable object?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3644-45 | Added on Wednesday, January 30, 2019, 01:14 AM

As a rule of thumb, always use clone whenever you need to return a copy of a mutable data field.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3646 | Added on Wednesday, January 30, 2019, 01:15 AM

4.3.7. Class-Based Access Privileges
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3647-48 | Added on Wednesday, January 30, 2019, 01:15 AM

What many people find surprising is that a method can access the private data of all objects of its class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3658 | Added on Wednesday, January 30, 2019, 01:18 AM

4.3.8. Private Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3659-60 | Added on Wednesday, January 30, 2019, 01:19 AM

While most methods are public, private methods are useful in certain circumstances.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3660 | Added on Wednesday, January 30, 2019, 01:21 AM

What're helper method?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3667 | Added on Wednesday, January 30, 2019, 01:22 AM

4.3.9. Final Instance Fields
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3663-64 | Added on Wednesday, January 30, 2019, 09:02 AM

By making a method private, you are under no obligation to keep it available if you change your implementation.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3665-67 | Added on Wednesday, January 30, 2019, 09:03 AM

The point is that as long as the method is private, the designers of the class can be assured that it is never used outside the other class, so they can simply drop it. If a method is public, you cannot simply drop it because other code might rely on it.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3667 | Added on Wednesday, January 30, 2019, 09:03 AM

4.3.9. Final Instance Fields
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3668 | Added on Wednesday, January 30, 2019, 09:04 AM

You can define an instance field as final. Such a field must be initialized when the object is constructed.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3669 | Added on Wednesday, January 30, 2019, 09:05 AM

Afterwards, the field may not be modified again.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3673 | Added on Wednesday, January 30, 2019, 09:07 AM

What's s final modifier useful for?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3674-76 | Added on Wednesday, January 30, 2019, 09:35 AM

For mutable classes, the final modifier is likely to confuse the reader. For example, private final Date hiredate;
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3674-77 | Added on Wednesday, January 30, 2019, 09:37 AM

For mutable classes, the final modifier is likely to confuse the reader. For example, private final Date hiredate; merely means that the object reference stored in the hiredate variable doesn’t get changed after the object is constructed. That does not mean that the hiredate object is constant.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3678-79 | Added on Wednesday, January 30, 2019, 09:38 AM

4.4. Static Fields and Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3681 | Added on Wednesday, January 30, 2019, 09:38 AM

4.4.1. Static Fields
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3681 | Added on Wednesday, January 30, 2019, 09:39 AM

What happens when a field is defined static?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3699 | Added on Wednesday, January 30, 2019, 09:44 AM

4.4.2. Static Constants
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3700 | Added on Wednesday, January 30, 2019, 09:46 AM

Static variables are quite rare. However, static constants are more common.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3706-7 | Added on Wednesday, January 30, 2019, 09:52 AM

Another static constant that you have used many times is System.out.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3714-17 | Added on Wednesday, January 30, 2019, 09:53 AM

If you look at the System class, you will notice a method setOut that sets System.out to a different stream. You may wonder how that method can change the value of a final variable. However, the setOut method is a native method, not implemented in the Java programming language. Native methods can bypass the access control mechanisms of the Java language.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3718 | Added on Wednesday, January 30, 2019, 10:00 AM

4.4.3. Static Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3719 | Added on Wednesday, January 30, 2019, 10:02 AM

What're static methods?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3726 | Added on Wednesday, January 30, 2019, 10:12 AM

However, static methods can access the static fields in their class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3726 | Added on Wednesday, January 30, 2019, 10:14 AM

What can static methods access in their class?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3728 | Added on Wednesday, January 30, 2019, 10:17 AM

What is needed to call a static method? 
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3737 | Added on Wednesday, January 30, 2019, 11:25 AM

Use static methods in two situations:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3750 | Added on Wednesday, January 30, 2019, 11:28 AM

4.4.4. Factory Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3751 | Added on Wednesday, January 30, 2019, 11:29 AM

The NumberFormat class uses factory methods that yield formatter objects for various styles.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3761 | Added on Wednesday, January 30, 2019, 11:31 AM

4.4.5. The main Method
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3761-62 | Added on Wednesday, January 30, 2019, 11:32 AM

Note that you can call static methods without having any objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3769-70 | Added on Wednesday, January 30, 2019, 11:33 AM

Every class can have a main method. That is a handy trick for unit-testing of classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3818-19 | Added on Wednesday, January 30, 2019, 11:38 AM

4.5. Method Parameters
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3820 | Added on Thursday, January 31, 2019, 09:51 AM

call by value means that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3821 | Added on Thursday, January 31, 2019, 09:51 AM

call by reference means that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3825 | Added on Thursday, January 31, 2019, 09:56 AM

The Java programming language always uses call by value.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3825 | Added on Thursday, January 31, 2019, 09:58 AM

What is meant by call by value in Java?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3843-44 | Added on Thursday, January 31, 2019, 10:05 AM

You have seen that it is impossible for a method to change a primitive type parameter. The situation is different for object parameters.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3877-78 | Added on Thursday, January 31, 2019, 10:15 AM

Here is a summary of what you can and cannot do with method parameters in Java:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3930 | Added on Thursday, January 31, 2019, 10:39 AM

4.6. Object Construction
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3933 | Added on Thursday, January 31, 2019, 10:39 AM

4.6.1. Overloading
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3937 | Added on Thursday, January 31, 2019, 10:41 AM

What's overloading?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3949 | Added on Thursday, January 31, 2019, 10:42 AM

4.6.2. Default Field Initialization
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3950 | Added on Thursday, January 31, 2019, 11:17 AM

What happens if you don't set a field explicitly in a constructor?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3955 | Added on Thursday, January 31, 2019, 11:18 AM

You must always explicitly initialize local variables in a method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3963 | Added on Thursday, January 31, 2019, 11:19 AM

4.6.3. The Constructor with No Arguments
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3963-64 | Added on Thursday, January 31, 2019, 11:19 AM

Many classes contain a constructor with no arguments that creates an object whose state is set to an appropriate default.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 3967 | Added on Thursday, January 31, 2019, 11:21 AM

What happens if a class is not explicitly given a constructor?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3970-71 | Added on Thursday, January 31, 2019, 11:22 AM

If a class supplies at least one constructor but does not supply a no-argument constructor, it is illegal to construct objects without supplying arguments.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3977-81 | Added on Thursday, January 31, 2019, 11:23 AM

If you write your class with even a single constructor of your own and you want the users of your class to have the ability to create an instance by a call to new ClassName() then you must provide a no-argument constructor.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3984-85 | Added on Thursday, January 31, 2019, 11:24 AM

4.6.4. Explicit Field Initialization
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3986-87 | Added on Thursday, January 31, 2019, 11:25 AM

It is always a good idea to make sure that, regardless of the constructor call, every instance field is set to something meaningful.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3987-89 | Added on Thursday, January 31, 2019, 11:26 AM

You can simply assign a value to any field in the class definition. For example: class Employee {    private String name = "";    . . . }
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3990-91 | Added on Thursday, January 31, 2019, 11:26 AM

This syntax is particularly useful if all constructors of a class need to set a particular instance field to the same value.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3991-92 | Added on Thursday, January 31, 2019, 11:27 AM

The initialization value doesn’t have to be a constant value.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4006 | Added on Thursday, January 31, 2019, 11:28 AM

4.6.5. Parameter Names
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4026 | Added on Thursday, January 31, 2019, 11:46 AM

4.6.6. Calling Another Constructor
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4028 | Added on Thursday, January 31, 2019, 11:47 AM

What's the sec meaning of the this keyword?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4033-34 | Added on Thursday, January 31, 2019, 11:49 AM

Using the this keyword in this manner is useful—you only need to write common construction code once.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4038 | Added on Thursday, January 31, 2019, 11:49 AM

4.6.7. Initialization Blocks
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4039 | Added on Thursday, January 31, 2019, 11:50 AM

You have already seen two ways to initialize a data field:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4041 | Added on Thursday, January 31, 2019, 11:50 AM

There is a third mechanism in Java, called an
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4049-50 | Added on Thursday, January 31, 2019, 11:52 AM

In this example, the id field is initialized in the object initialization block, no matter which constructor is used to construct an object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4055 | Added on Thursday, January 31, 2019, 11:53 AM

However, to avoid circular definitions, it is not legal to read from fields that are only initialized later.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4057-58 | Added on Thursday, January 31, 2019, 11:54 AM

Therefore, we suggest that you always place initialization blocks after the field definitions.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4060 | Added on Thursday, January 31, 2019, 11:55 AM

Here is what happens in detail when a constructor is called:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4068 | Added on Thursday, January 31, 2019, 11:58 AM

Whar are the ways for init a static field?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4071-72 | Added on Thursday, January 31, 2019, 11:58 AM

Place the code inside a block and tag it with the keyword static.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4073-74 | Added on Thursday, January 31, 2019, 11:58 AM

// static initialization block static {    Random generator = new Random();    nextId = generator.nextInt(10000); }
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4094 | Added on Thursday, January 31, 2019, 03:20 PM

java.util.Random 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4128-29 | Added on Thursday, January 31, 2019, 03:32 PM

4.6.8. Object Destruction and the finalize Method
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4132-34 | Added on Thursday, January 31, 2019, 07:17 PM

Of course, some objects utilize a resource other than memory, such as a file or a handle to another object that uses system resources. In this case, it is important that the resource be reclaimed and recycled when it is no longer needed.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4134-36 | Added on Thursday, January 31, 2019, 07:18 PM

You can add a finalize method to any class. The finalize method will be called before the garbage collector sweeps away the object. In practice, do not rely on the finalize method for recycling any resources that are in short supply—you simply cannot know when this method will be called.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4138 | Added on Thursday, January 31, 2019, 07:19 PM

The method call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4138-39 | Added on Thursday, January 31, 2019, 07:19 PM

System.runFinalizersOnExit(true) guarantees that finalizer methods are called before Java shuts down.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4141-42 | Added on Thursday, January 31, 2019, 07:20 PM

If a resource needs to be closed as soon as you have finished using it, you need to manage it manually. Supply a close method that does the necessary cleanup, and call it when you are done with the object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4144 | Added on Thursday, January 31, 2019, 07:20 PM

4.7. Packages
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4145 | Added on Thursday, January 31, 2019, 07:22 PM

What's a package made up of and what's it used for?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4148 | Added on Thursday, January 31, 2019, 07:23 PM

hierarchical packages.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 4149 | Added on Thursday, January 31, 2019, 07:23 PM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4149 | Added on Thursday, January 31, 2019, 07:23 PM

All standard Java packages are inside the java and javax package hierarchies.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4149-50 | Added on Thursday, January 31, 2019, 07:23 PM

The main reason for using packages is to guarantee the uniqueness of class names.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4149 | Added on Thursday, January 31, 2019, 07:24 PM

What's the main reason for using packages?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4151 | Added on Thursday, January 31, 2019, 07:26 PM

What to use to ensure a unique package name?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4155-56 | Added on Thursday, January 31, 2019, 07:27 PM

From the point of view of the compiler, there is absolutely no relationship between nested packages. For example, the packages java.util and java.util.jar have nothing to do with each other. Each is its own independent collection of classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4157 | Added on Thursday, January 31, 2019, 07:27 PM

4.7.1. Class Importation
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4157-58 | Added on Thursday, January 31, 2019, 07:28 PM

A class can use all classes from its own package and all public classes from other packages.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4158 | Added on Thursday, January 31, 2019, 07:29 PM

What're the two ways to use public classes from another packages?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4158 | Added on Thursday, January 31, 2019, 07:30 PM

What're the two ways to use public classes from another package?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4163 | Added on Thursday, January 31, 2019, 07:32 PM

Where do we put an import statement?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4172-73 | Added on Thursday, January 31, 2019, 07:33 PM

In Eclipse, you can select the menu option Source -> Organize Imports. Package statements such as import java.util.*; are automatically expanded into a list of specific imports
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4179-80 | Added on Thursday, January 31, 2019, 08:21 PM

The only time that you need to pay attention to packages is when you have a name conflict.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4185-87 | Added on Thursday, January 31, 2019, 08:22 PM

You can solve this problem by adding a specific import statement: import java.util.*; import java.sql.*; import java.util.Date; What if you really need both Date classes? Then you need to use the full package name with every class name.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4204 | Added on Friday, February 01, 2019, 09:38 AM

4.7.2. Static Imports
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4205 | Added on Friday, February 01, 2019, 09:41 AM

What's the use of static imports?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4206-7 | Added on Friday, February 01, 2019, 09:45 AM

import static java.lang.System.*;
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4210-11 | Added on Friday, February 01, 2019, 09:45 AM

You can also import a specific method or field: import static java.lang.System.out;
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4216 | Added on Friday, February 01, 2019, 09:46 AM

4.7.3. Addition of a Class into a Package
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4216 | Added on Friday, February 01, 2019, 09:49 AM

How to put a class in a package?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4220 | Added on Friday, February 01, 2019, 09:55 AM

What happens if we don't put a package statement in the same file?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4222-23 | Added on Friday, February 01, 2019, 10:01 AM

Place source files into a subdirectory that matches the full package name.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4270 | Added on Friday, February 01, 2019, 12:22 PM

The compiler does not check the directory structure when it compiles source files.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4276 | Added on Friday, February 01, 2019, 04:52 PM

4.7.4. Package Scope
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4278 | Added on Friday, February 01, 2019, 04:56 PM

If neither public nor private is specified for a class, a var or a method, what will be the access feature of the entity?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4282-83 | Added on Friday, February 01, 2019, 04:58 PM

For classes, this is a reasonable default. However, for variables, this was an unfortunate choice. Variables must explicitly be marked private, or they will default to being package-visible.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4307 | Added on Friday, February 01, 2019, 07:19 PM

4.8. The Class Path
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4309 | Added on Friday, February 01, 2019, 07:20 PM

Class files can also be stored in a JAR (Java archive) file.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4309 | Added on Friday, February 01, 2019, 07:21 PM

What does a jar file contain?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4316 | Added on Friday, February 01, 2019, 07:22 PM

To share classes among programs, you need to do the following:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4326 | Added on Friday, February 01, 2019, 07:25 PM

This class path contains
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4330-31 | Added on Friday, February 01, 2019, 07:26 PM

Starting with Java SE 6, you can specify a wildcard for a JAR file directory, like this:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4338-41 | Added on Friday, February 01, 2019, 07:27 PM

The javac compiler always looks for files in the current directory, but the java virtual machine launcher only looks into the current directory if the “.” directory is on the class path. If you have no class path set, this is not a problem—the default class path consists of the “.” directory. But if you have set the class path and forgot to include the “.” directory, your programs will compile without error, but they won’t run.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4351-52 | Added on Friday, February 01, 2019, 07:31 PM

If you refer to a class without specifying its package, the compiler first needs to find out the package that contains the class. It consults all import directives as possible sources for the class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4358-59 | Added on Friday, February 01, 2019, 07:33 PM

The compiler goes one step further. It looks at the source files to see if the source is newer than the class file. If so, the source file is recompiled automatically.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4363-64 | Added on Friday, February 01, 2019, 07:34 PM

4.8.1. Setting the Class Path
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4364-65 | Added on Friday, February 01, 2019, 07:34 PM

It is best to specify the class path with the -classpath (or -cp) option:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4377-79 | Added on Friday, February 01, 2019, 11:46 PM

Some people recommend to set the CLASSPATH environment variable permanently. This is generally a bad idea. People forget the global setting, and are surprised when their classes are not loaded properly.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4383-84 | Added on Friday, February 01, 2019, 11:51 PM

Some people recommend to bypass the class path altogether, by dropping all JAR files into the jre/lib/ext directory. That is truly bad advice, for two reasons.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4388-90 | Added on Friday, February 01, 2019, 11:52 PM

4.9. Documentation Comments The JDK contains a very useful tool, called javadoc, that generates HTML documentation from your source files.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4391-92 | Added on Friday, February 01, 2019, 11:53 PM

If you add comments that start with the special delimiter /** to your source code, you too can easily produce professional looking documentation.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4395-99 | Added on Friday, February 01, 2019, 11:54 PM

4.9.1. Comment Insertion The javadoc utility extracts information for the following items: • Packages • Public classes and interfaces • Public and protected fields • Public and protected constructors and methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4401-2 | Added on Saturday, February 02, 2019, 11:33 AM

Each comment is placed immediately above the feature it describes. A comment starts with a /** and ends with a */.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4402-4 | Added on Saturday, February 02, 2019, 11:34 AM

Each /** . . . */ documentation comment contains free-form text followed by tags. A tag starts with an @, such as @author or @param.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4403 | Added on Saturday, February 02, 2019, 11:35 AM

A tag starts with
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4404 | Added on Saturday, February 02, 2019, 11:37 AM

The first sentence of the free-form text should be a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4405-6 | Added on Saturday, February 02, 2019, 11:37 AM

In the free-form text, you can use HTML modifiers
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4407-9 | Added on Saturday, February 02, 2019, 11:38 AM

You should, however, stay away from headings <h1> or rules <hr> because they can interfere with the formatting of the document.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4410-11 | Added on Saturday, February 02, 2019, 11:38 AM

If your comments contain links to other files such as images
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4415 | Added on Saturday, February 02, 2019, 11:39 AM

4.9.2. Class Comments
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4415-16 | Added on Saturday, February 02, 2019, 11:40 AM

The class comment must be placed after any import statements, directly before the class definition.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4430-31 | Added on Saturday, February 02, 2019, 11:48 AM

4.9.3. Method Comments
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4431-32 | Added on Saturday, February 02, 2019, 11:49 AM

Each method comment must immediately precede the method that it describes. In addition to the general-purpose tags, you can use the following tags:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4432-33 | Added on Saturday, February 02, 2019, 11:50 AM

@param variable description
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4432-33 | Added on Saturday, February 02, 2019, 11:51 AM

• @param variable description
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4435 | Added on Saturday, February 02, 2019, 11:51 AM

• @return description
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4437-38 | Added on Saturday, February 02, 2019, 11:54 AM

• @throws class description
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4445 | Added on Saturday, February 02, 2019, 11:55 AM

4.9.4. Field Comments
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4445-46 | Added on Saturday, February 02, 2019, 11:57 AM

You only need to document public fields—generally that means static constants.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4448 | Added on Saturday, February 02, 2019, 11:58 AM

4.9.5. General Comments
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4448-49 | Added on Saturday, February 02, 2019, 11:58 AM

The following tags can be used in class documentation comments:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4449 | Added on Saturday, February 02, 2019, 11:58 AM

• @author name
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4451 | Added on Saturday, February 02, 2019, 11:59 AM

• @version text
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4453 | Added on Saturday, February 02, 2019, 11:59 AM

The following tags can be used in all documentation comments:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4454 | Added on Saturday, February 02, 2019, 11:59 AM

• @since text
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4456-57 | Added on Saturday, February 02, 2019, 12:00 PM

• @deprecated text
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4460-61 | Added on Saturday, February 02, 2019, 12:00 PM

You can use hyperlinks to other relevant parts of the javadoc documentation, or to external documents, with the @see and @link tags.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4488 | Added on Saturday, February 02, 2019, 12:11 PM

4.9.6. Package and Overview Comments
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4489-90 | Added on Saturday, February 02, 2019, 12:11 PM

to generate package comments, you need to add a separate file in each package directory. You have two choices:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4497 | Added on Saturday, February 02, 2019, 12:13 PM

4.9.7. Comment Extraction
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4512-13 | Added on Saturday, February 02, 2019, 12:16 PM

Another useful option is -link, to include hyperlinks to standard classes. For example, if you use the command
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4512-13 | Added on Saturday, February 02, 2019, 12:17 PM

Another useful option is -link, to include hyperlinks to standard classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4516-17 | Added on Saturday, February 02, 2019, 12:17 PM

If you use the -linksource option, each source file is converted to HTML (without color coding, but with line numbers), and each class and method name turns into a hyperlink to the source.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4525 | Added on Saturday, February 02, 2019, 12:26 PM

4.10. Class Design Hints
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4526 | Added on Saturday, February 02, 2019, 12:26 PM

some hints that will make your classes more acceptable in well-mannered OOP circles.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4527 | Added on Saturday, February 02, 2019, 12:26 PM

1. Always keep data private.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4531-32 | Added on Saturday, February 02, 2019, 12:28 PM

2. Always initialize data.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4534-35 | Added on Saturday, February 02, 2019, 12:28 PM

3. Don’t use too many basic types in a class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4541 | Added on Saturday, February 02, 2019, 12:29 PM

4. Not all fields need individual field accessors and mutators.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4545 | Added on Saturday, February 02, 2019, 12:30 PM

6. Break up classes that have too many responsibilities.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4564 | Added on Saturday, February 02, 2019, 12:33 PM

7. Make the names of your classes and methods reflect their responsibilities.
==========
jvm系列文章 (May Michael)
- Highlight Loc. 1 | Added on Saturday, February 02, 2019, 12:55 PM

jvm系列(一):java类的加载机制
==========
jvm系列文章 (May Michael)
- Highlight Loc. 1 | Added on Saturday, February 02, 2019, 12:55 PM

jvm系列(一):java类的加载机制
==========
jvm系列文章 (May Michael)
- Highlight Loc. 5 | Added on Saturday, February 02, 2019, 12:56 PM

1、什么是类的加载
==========
jvm系列文章 (May Michael)
- Highlight Loc. 6-10 | Added on Saturday, February 02, 2019, 12:59 PM

类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个 java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的 Class对象，
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4572-73 | Added on Sunday, February 03, 2019, 09:10 AM

Chapter 5. Inheritance
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4585-86 | Added on Sunday, February 03, 2019, 09:12 AM

This chapter also covers reflection, the ability to find out more about classes and their properties in a running program.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4588-89 | Added on Sunday, February 03, 2019, 09:12 AM

5.1. Classes, Superclasses, and Subclasses
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4601-2 | Added on Sunday, February 03, 2019, 09:25 AM

All inheritance in Java is public inheritance; there is no analog to the C++ features of private and protected inheritance.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4604 | Added on Sunday, February 03, 2019, 09:26 AM

The existing class is called
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4604 | Added on Sunday, February 03, 2019, 09:26 AM

The new class is called
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4626 | Added on Sunday, February 03, 2019, 09:31 AM

When defining a subclass by extending its superclass, you only need to indicate
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4627 | Added on Sunday, February 03, 2019, 09:31 AM

When designing classes, you place
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4630 | Added on Sunday, February 03, 2019, 09:33 AM

supply a new method to override the superclass method:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4630 | Added on Sunday, February 03, 2019, 09:35 AM

In what situation a new method needs to override the one of the same name in the super class?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4636-37 | Added on Sunday, February 03, 2019, 09:43 AM

The getSalary method of the Manager class has no direct access to the private fields of the superclass.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4638-40 | Added on Sunday, February 03, 2019, 09:44 AM

Only the methods of the Employee class have access to the private fields. If the Manager methods want to access those private fields, they have to do what every other method does—use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4647-48 | Added on Sunday, February 03, 2019, 09:46 AM

We need to indicate that we want to call the getSalary method of the Employee super-class, not the current class. You use the special keyword
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4648 | Added on Sunday, February 03, 2019, 09:46 AM

for this purpose. The call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4649-50 | Added on Sunday, February 03, 2019, 09:47 AM

calls the getSalary method of the Employee class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4655-56 | Added on Sunday, February 03, 2019, 09:48 AM

super is not a reference to an object. For example, you cannot assign the value super to another object variable. Instead, super is a special keyword that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4657-58 | Added on Sunday, February 03, 2019, 09:48 AM

As you saw, a subclass can add fields, and it can add methods or override the methods of the superclass.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4663 | Added on Sunday, February 03, 2019, 09:54 AM

What does the constructor look like in a subclass?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4671-72 | Added on Sunday, February 03, 2019, 10:04 AM

The call using super must be the first statement in the constructor for the subclass.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4672-73 | Added on Sunday, February 03, 2019, 10:04 AM

If the subclass constructor does not call a superclass constructor explicitly,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4673-74 | Added on Sunday, February 03, 2019, 10:05 AM

If the superclass does not have a no-argument constructor and the subclass constructor does not call another superclass constructor explicitly,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4674 | Added on Sunday, February 03, 2019, 10:06 AM

then again what happens?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4676-77 | Added on Sunday, February 03, 2019, 10:07 AM

Recall that the this keyword has two meanings:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4677-78 | Added on Sunday, February 03, 2019, 10:07 AM

Likewise, the super keyword has two meanings:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4678-79 | Added on Sunday, February 03, 2019, 10:08 AM

When used to invoke constructors, the this and super keywords are closely related.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4679 | Added on Sunday, February 03, 2019, 10:09 AM

What's in common?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4710 | Added on Sunday, February 03, 2019, 10:33 AM

What's polymorphism?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 4711 | Added on Sunday, February 03, 2019, 10:34 AM

What's dynamic binding?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4714-15 | Added on Sunday, February 03, 2019, 10:35 AM

In Java, you do not need to declare a method as virtual. Dynamic binding is the default behavior. If you do not want a method to be virtual, you tag it as
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4755 | Added on Sunday, February 03, 2019, 12:33 PM

5.1.1. Inheritance Hierarchies
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4757 | Added on Sunday, February 03, 2019, 12:34 PM

is called an inheritance hierarchy,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4758 | Added on Sunday, February 03, 2019, 12:35 PM

is its inheritance chain.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4760-61 | Added on Sunday, February 03, 2019, 12:35 PM

There is usually more than one chain of descent from a distant ancestor class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4764-65 | Added on Sunday, February 03, 2019, 12:36 PM

Java does not support multiple inheritance.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4767 | Added on Sunday, February 03, 2019, 12:37 PM

5.1.2. Polymorphism
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4768 | Added on Sunday, February 03, 2019, 12:38 PM

The “is–a” rule states that every object of the subclass is an object of the superclass.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4771 | Added on Sunday, February 03, 2019, 12:38 PM

substitution principle. That principle states that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4775 | Added on Sunday, February 03, 2019, 12:39 PM

In the Java programming language, object variables are polymorphic.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4772 | Added on Sunday, February 03, 2019, 08:01 PM

For example, you can assign a subclass object to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4791-92 | Added on Sunday, February 03, 2019, 08:02 PM

In Java, arrays of subclass references can be converted to arrays of superclass references without a cast.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4806 | Added on Sunday, February 03, 2019, 08:04 PM

To make sure no such corruption can occur, all arrays remember the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4809 | Added on Sunday, February 03, 2019, 08:05 PM

5.1.3. Dynamic Binding
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 996 | Added on Sunday, February 03, 2019, 09:18 PM

kefir,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4809-10 | Added on Monday, February 04, 2019, 06:26 PM

It is important to understand what happens when a method call is applied to an object. Here are the details:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4811 | Added on Monday, February 04, 2019, 06:26 PM

1. The compiler looks at the declared type of the object and the method name.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4816-17 | Added on Monday, February 04, 2019, 06:27 PM

2. Next, the compiler determines the types of the parameters that are supplied in the method call.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4818-19 | Added on Monday, February 04, 2019, 06:28 PM

This process is called overloading resolution.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4829-30 | Added on Monday, February 04, 2019, 06:31 PM

However, when you override a method, you need to keep the return type compatible. A subclass may change the return type to a subtype of the original type.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4838-39 | Added on Monday, February 04, 2019, 06:33 PM

3. If the method is private, static, final, or a constructor, then the compiler knows exactly which method to call.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4839 | Added on Monday, February 04, 2019, 06:33 PM

This is called static binding.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4842-43 | Added on Monday, February 04, 2019, 06:34 PM

4. When the program runs and uses dynamic binding to call a method, then the virtual machine must call the version of the method that is appropriate for the actual type of the object to which x refers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4872 | Added on Monday, February 04, 2019, 11:28 PM

Dynamic binding has a very important property: It makes programs extensible without the need for modifying existing code.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4877-78 | Added on Monday, February 04, 2019, 11:30 PM

When you override a method, the subclass method must be at least as visible as the superclass method. In particular, if the superclass method is public, then the subclass method must also be declared as public.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4880-81 | Added on Monday, February 04, 2019, 11:31 PM

5.1.4. Preventing Inheritance: Final Classes and Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4882-83 | Added on Monday, February 04, 2019, 11:31 PM

Classes that cannot be extended are called final classes, and you use the final modifier in the definition of the class to indicate this.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4882 | Added on Monday, February 04, 2019, 11:33 PM

Classes that cannot be extended are called
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4882 | Added on Monday, February 04, 2019, 11:33 PM

and you use the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4882-83 | Added on Monday, February 04, 2019, 11:34 PM

modifier in the definition of the class to indicate this.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4886 | Added on Monday, February 04, 2019, 11:35 PM

You can also make a specific method in a class
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4886 | Added on Monday, February 04, 2019, 11:35 PM

If you do this, then no subclass can override that method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4892-93 | Added on Monday, February 04, 2019, 11:36 PM

if a class is declared final, only the methods, not the fields, are automatically final.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4894 | Added on Monday, February 04, 2019, 11:36 PM

There is only one good reason to make a method or class final:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4903 | Added on Tuesday, February 05, 2019, 12:33 AM

If a method is not overridden, and it is short, then a compiler can optimize the method call away—a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4903 | Added on Tuesday, February 05, 2019, 12:34 AM

If a method is not overridden, and it is short, then a compiler can optimize the method call away—a process
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4907 | Added on Tuesday, February 05, 2019, 12:35 AM

the just-in-time compiler in the virtual machine
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4907-8 | Added on Tuesday, February 05, 2019, 12:36 AM

knows exactly which classes extend a given class, and it can check whether any class actually overrides a given method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4911 | Added on Tuesday, February 05, 2019, 12:37 AM

5.1.5. Casting
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4916 | Added on Tuesday, February 05, 2019, 12:38 AM

To actually make a cast of an object reference, use a syntax similar to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4919 | Added on Tuesday, February 05, 2019, 12:38 AM

There is only one reason why you would want to make a cast—to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4924 | Added on Tuesday, February 05, 2019, 12:41 AM

As you know, in Java every object variable has a type. The type describes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4926 | Added on Tuesday, February 05, 2019, 12:42 AM

The compiler checks that you do not promise too much when you store a value in a variable.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4927-28 | Added on Tuesday, February 05, 2019, 12:43 AM

If you assign a super-class reference to a subclass variable, you are promising more. Then you must use a cast so that your promise can be checked at runtime.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4929 | Added on Tuesday, February 05, 2019, 12:45 AM

What happens if you try to cast down an inheritance chain and you are “lying” about what an object contains?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4932-33 | Added on Tuesday, February 05, 2019, 12:46 AM

Thus, it is good programming practice to find out whether a cast will succeed before attempting it. Simply use the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4933 | Added on Tuesday, February 05, 2019, 12:47 AM

operator.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4935 | Added on Tuesday, February 05, 2019, 12:47 AM

the compiler will not let you make a cast if there is no chance for the cast to succeed.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4938-40 | Added on Tuesday, February 05, 2019, 12:48 AM

• You can cast only within an inheritance hierarchy. • Use instanceof to check before casting from a superclass to a subclass.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4946-47 | Added on Tuesday, February 05, 2019, 12:49 AM

Actually, converting the type of an object by performing a cast is not usually a good idea.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4952-53 | Added on Tuesday, February 05, 2019, 12:50 AM

Remember, it takes only one uncaught ClassCastException to terminate your program. In general, it is best to minimize the use of casts and the instanceof operator.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4971 | Added on Tuesday, February 05, 2019, 01:10 AM

5.1.6. Abstract Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4985-90 | Added on Tuesday, February 05, 2019, 09:54 AM

public abstract String getDescription();    // no implementation required For added clarity, a class with one or more abstract methods must itself be declared abstract. abstract class Person {  . . .    public abstract String getDescription(); } In addition to abstract methods, abstract classes can have fields and concrete methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4997 | Added on Tuesday, February 05, 2019, 09:56 AM

You should always move common fields and methods (whether abstract or not) to the superclass (whether abstract or not).
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4998-99 | Added on Tuesday, February 05, 2019, 10:03 AM

Abstract methods act as placeholders for methods that are implemented in the subclasses.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4999 | Added on Tuesday, February 05, 2019, 10:11 AM

When you extend an abstract class, you have two choices.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5003 | Added on Tuesday, February 05, 2019, 10:15 AM

A class can even be declared as abstract even though it has no abstract methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5004-5 | Added on Tuesday, February 05, 2019, 10:16 AM

Abstract classes cannot be instantiated. That is, if a class is declared as abstract, no objects of that class can be created.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5007-8 | Added on Tuesday, February 05, 2019, 10:19 AM

Note that you can still create object variables of an abstract class, but such a variable must refer to an object of a nonabstract subclass.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1046 | Added on Tuesday, February 05, 2019, 11:34 PM

avuncular
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5032-34 | Added on Wednesday, February 06, 2019, 02:11 AM

the variable p never refers to a Person object because it is impossible to construct an object of the abstract Person class. The variable p always refers to an object of a concrete subclass such as Employee or Student.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5035-36 | Added on Wednesday, February 06, 2019, 02:12 AM

Could you have omitted the abstract method altogether from the Person superclass, simply defining the getDescription methods in the Employee and Student subclasses?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 5036 | Added on Wednesday, February 06, 2019, 02:14 AM

What will happen then?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5048-49 | Added on Wednesday, February 06, 2019, 02:21 AM

Abstract methods are an important concept in the Java programming language. You will encounter them most commonly inside interfaces.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5079 | Added on Wednesday, February 06, 2019, 02:27 AM

5.1.7. Protected Access
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 5083 | Added on Wednesday, February 06, 2019, 02:30 AM

In what case do you declare a class feature as protected?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5085-86 | Added on Wednesday, February 06, 2019, 02:32 AM

However, the Manager class methods can peek inside the hireDay field of Manager objects only, not of other Employee objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5088 | Added on Wednesday, February 06, 2019, 02:32 AM

In practice, use protected fields with caution.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5091-92 | Added on Wednesday, February 06, 2019, 02:33 AM

Protected methods make more sense. A class may declare a method as protected if it is tricky to use.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5092 | Added on Wednesday, February 06, 2019, 09:26 AM

This indicates that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5096-97 | Added on Wednesday, February 06, 2019, 09:28 AM

As it happens, protected features in Java are visible to all subclasses as well as to all other classes in the same package.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5099 | Added on Wednesday, February 06, 2019, 09:29 AM

Here is a summary of the four access modifiers in Java that control visibility:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5099-5100 | Added on Wednesday, February 06, 2019, 09:29 AM

1. Visible to the class only
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5100-5101 | Added on Wednesday, February 06, 2019, 09:31 AM

2. Visible to the world
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5101-2 | Added on Wednesday, February 06, 2019, 09:32 AM

3. Visible to the package and all subclasses
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5102-3 | Added on Wednesday, February 06, 2019, 09:33 AM

4. Visible to the package—the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5103-4 | Added on Wednesday, February 06, 2019, 09:33 AM

5.2. Object: The Cosmic Superclass
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5107 | Added on Wednesday, February 06, 2019, 09:34 AM

The ultimate superclass Object is taken for granted if no superclass is explicitly mentioned.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5110-11 | Added on Wednesday, February 06, 2019, 09:42 AM

You can use a variable of type Object to refer to objects of any type:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5112-13 | Added on Wednesday, February 06, 2019, 09:42 AM

Of course, a variable of type Object is only useful as a generic holder for arbitrary values. To do anything specific with the value, you need to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5122 | Added on Wednesday, February 06, 2019, 09:48 AM

5.2.1. The equals Method
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5123 | Added on Wednesday, February 06, 2019, 09:49 AM

The equals method,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5124 | Added on Wednesday, February 06, 2019, 09:49 AM

determines whether
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5126 | Added on Wednesday, February 06, 2019, 09:53 AM

However, you will often want to implement state-based equality testing, in which
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5138 | Added on Wednesday, February 06, 2019, 09:56 AM

The
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5138-39 | Added on Wednesday, February 06, 2019, 09:56 AM

method returns the class of an object—we
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5141-43 | Added on Wednesday, February 06, 2019, 11:37 AM

To guard against the possibility that name or hireDay are null, use the Objects.equals method. The call Objects.equals(a, b) returns
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5148-49 | Added on Wednesday, February 06, 2019, 11:39 AM

When you define the equals method for a subclass, first call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5149 | Added on Wednesday, February 06, 2019, 11:40 AM

If that test doesn’t pass, then
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5149 | Added on Wednesday, February 06, 2019, 11:40 AM

If
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5150 | Added on Wednesday, February 06, 2019, 11:41 AM

are equal, then you are ready to compare the instance fields of the subclass.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5155-56 | Added on Wednesday, February 06, 2019, 11:42 AM

5.2.2. Equality Testing and Inheritance
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5156-57 | Added on Wednesday, February 06, 2019, 11:44 AM

How should the equals method behave if the implicit and explicit parameters don’t belong to the same class?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5200-5201 | Added on Thursday, February 07, 2019, 02:22 AM

Here is a recipe for writing the perfect equals method:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5224 | Added on Thursday, February 07, 2019, 02:24 AM

If you have fields of array type, you can use the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5224-25 | Added on Thursday, February 07, 2019, 02:24 AM

to check that the corresponding array elements are equal.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5234-35 | Added on Thursday, February 07, 2019, 02:31 AM

This method declares the explicit parameter type as Employee. As a result, it does not override the equals method of the Object class but defines a completely unrelated method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5236-37 | Added on Thursday, February 07, 2019, 02:31 AM

You can protect yourself against this type of error by
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5245-47 | Added on Thursday, February 07, 2019, 02:33 AM

java.util.Arrays 1.2 • static boolean equals(type[] a, type[] b) 5.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5251-52 | Added on Thursday, February 07, 2019, 02:34 AM

java.util.Objects 7
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5256 | Added on Thursday, February 07, 2019, 02:34 AM

5.2.3. The hashCode Method
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5257 | Added on Thursday, February 07, 2019, 02:35 AM

A hash code is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5263-64 | Added on Thursday, February 07, 2019, 02:39 AM

The hashCode method is defined in the Object class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5271-72 | Added on Thursday, February 07, 2019, 02:40 AM

Note that the strings s and t have the same hash code because, for strings, the hash codes are derived from their contents.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5274-75 | Added on Thursday, February 07, 2019, 09:41 AM

If you redefine the equals method, you will also need to redefine the hashCode method for objects that users might insert into a hash table.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5276-77 | Added on Thursday, February 07, 2019, 09:43 AM

The hashCode method should return an integer (which can be negative). Just combine the hash codes of the instance fields so that the hash codes for different objects are likely to be widely scattered.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5282 | Added on Thursday, February 07, 2019, 09:45 AM

However, as of Java 7, there are two improvements you can make. First, it is better to use the null-safe method
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5282-83 | Added on Thursday, February 07, 2019, 09:45 AM

It returns
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5286 | Added on Thursday, February 07, 2019, 09:47 AM

Even better, when you need to combine multiple hash values, call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5289-91 | Added on Thursday, February 07, 2019, 09:48 AM

Your definitions of equals and hashCode must be compatible: If x.equals(y) is true, then x.hashCode() must return the same value as y.hashCode().
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5291-92 | Added on Thursday, February 07, 2019, 09:48 AM

For example, if you define Employee.equals to compare employee IDs, then the hashCode method needs to hash the IDs, not employee names or memory addresses.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5294-95 | Added on Thursday, February 07, 2019, 09:49 AM

If you have fields of an array type, you can use the static Arrays.hashCode method to compute a hash code composed of the hash codes of the array elements.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5296 | Added on Thursday, February 07, 2019, 09:49 AM

java.lang.Object 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5297 | Added on Thursday, February 07, 2019, 09:51 AM

• int hashCode()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5300-5301 | Added on Thursday, February 07, 2019, 09:51 AM

java.lang.Objects 7
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5301-2 | Added on Thursday, February 07, 2019, 09:51 AM

• int hash(Object... objects)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5304 | Added on Thursday, February 07, 2019, 09:54 AM

• static int hashCode(Object a)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5307 | Added on Thursday, February 07, 2019, 09:55 AM

java.util.Arrays 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5308-9 | Added on Thursday, February 07, 2019, 09:55 AM

• static int hashCode(type[] a) 5.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5312 | Added on Thursday, February 07, 2019, 09:59 AM

5.2.4. The toString Method
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5313 | Added on Thursday, February 07, 2019, 10:04 AM

Another important method in Object is the toString method that returns
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5316 | Added on Thursday, February 07, 2019, 10:05 AM

Most (but not all) toString methods follow this format:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5320-21 | Added on Thursday, February 07, 2019, 10:17 AM

Instead of hardwiring the class name into the toString method, call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5324-26 | Added on Thursday, February 07, 2019, 12:39 PM

Such toString method will also work for subclasses. Of course, the subclass programmer should define its own toString method and add the subclass fields.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5324-25 | Added on Thursday, February 07, 2019, 12:40 PM

Such toString method will also work for subclasses. Of course, the subclass programmer should define
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5326 | Added on Thursday, February 07, 2019, 12:40 PM

If the superclass uses getClass().getName(), then the subclass can
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5343 | Added on Thursday, February 07, 2019, 12:43 PM

The Object class defines the toString method to print the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5349-50 | Added on Thursday, February 07, 2019, 12:45 PM

Annoyingly, arrays inherit the toString method from Object, with the added twist that the array type is printed in an archaic format.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5355 | Added on Thursday, February 07, 2019, 12:45 PM

The remedy is to call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5359 | Added on Thursday, February 07, 2019, 12:46 PM

To correctly print multidimensional arrays
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5360 | Added on Thursday, February 07, 2019, 12:46 PM

use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5361 | Added on Thursday, February 07, 2019, 12:47 PM

The toString method is a great tool for
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5368 | Added on Thursday, February 07, 2019, 12:48 PM

We strongly recommend that you add a toString method to each class that you write.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5430 | Added on Thursday, February 07, 2019, 01:29 PM

java.lang.Object 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5431 | Added on Thursday, February 07, 2019, 01:30 PM

• Class getClass()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5434-35 | Added on Thursday, February 07, 2019, 01:30 PM

>• boolean equals(Object otherObject)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5438 | Added on Thursday, February 07, 2019, 01:31 PM

• String toString()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5441 | Added on Thursday, February 07, 2019, 01:34 PM

java.lang.Class 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5442 | Added on Thursday, February 07, 2019, 01:34 PM

• String getName()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5444-45 | Added on Thursday, February 07, 2019, 01:34 PM

• Class getSuperclass()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5447 | Added on Thursday, February 07, 2019, 01:35 PM

5.3. Generic Array Lists
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5454 | Added on Thursday, February 07, 2019, 01:40 PM

The ArrayList class
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5456 | Added on Thursday, February 07, 2019, 01:40 PM

ArrayList is a generic class with a type parameter. To specify the type of the element objects that the array list holds,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5456-57 | Added on Thursday, February 07, 2019, 01:41 PM

ArrayList is a generic class with a type parameter. To specify the type of the element objects that the array list holds, you
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5461-62 | Added on Thursday, February 07, 2019, 01:43 PM

As of Java 7, you can omit the type parameter on the right-hand side:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5463 | Added on Thursday, February 07, 2019, 01:50 PM

the “diamond” syntax
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5469-70 | Added on Thursday, February 07, 2019, 01:52 PM

Before Java SE 5.0, there were no generic classes. Instead, there was a single ArrayList class, a “one size fits all” collection that holds elements of type Object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5474 | Added on Thursday, February 07, 2019, 01:52 PM

In even older versions of Java, programmers used the Vector class for dynamic arrays.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5476 | Added on Thursday, February 07, 2019, 01:53 PM

Use the add method to add new elements to an array list.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5480-81 | Added on Thursday, February 07, 2019, 01:54 PM

If you call add and the internal array is full,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5482 | Added on Thursday, February 07, 2019, 01:55 PM

If you already know, or have a good guess, how many elements you want to store, call the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5484-85 | Added on Thursday, February 07, 2019, 01:55 PM

That call allocates an internal array of 100 objects. Then, the first 100 calls to add will not involve
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5485-86 | Added on Thursday, February 07, 2019, 01:56 PM

You can also pass an initial capacity to the ArrayList constructor: ArrayList<Employee> staff = new ArrayList<>(100);
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5489 | Added on Thursday, February 07, 2019, 05:43 PM

Allocating an array list as
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5491-92 | Added on Thursday, February 07, 2019, 05:43 PM

is not the same as allocating a new array as
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5494-95 | Added on Thursday, February 07, 2019, 05:44 PM

There is an important distinction between the capacity of an array list and the size of an array.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 5495 | Added on Thursday, February 07, 2019, 05:45 PM

What's the distinction?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5498 | Added on Thursday, February 07, 2019, 05:45 PM

The
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5498 | Added on Thursday, February 07, 2019, 05:45 PM

method returns the actual number of elements in the array list.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5500 | Added on Thursday, February 07, 2019, 05:46 PM

This is the equivalent of
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5501 | Added on Thursday, February 07, 2019, 05:46 PM

for an array a.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5502 | Added on Thursday, February 07, 2019, 05:46 PM

Once you are reasonably sure that the array list is at its permanent size, you can call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5504-5 | Added on Thursday, February 07, 2019, 05:47 PM

Once you trim the size of an array list, adding new elements will
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5513-14 | Added on Thursday, February 07, 2019, 05:49 PM

java.util.ArrayList<T> 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5514-15 | Added on Thursday, February 07, 2019, 05:49 PM

• ArrayList<T>()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5517 | Added on Thursday, February 07, 2019, 05:49 PM

• ArrayList<T>(int initialCapacity)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5521 | Added on Thursday, February 07, 2019, 05:50 PM

• boolean add(T obj)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5525 | Added on Thursday, February 07, 2019, 05:50 PM

• int size()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5528 | Added on Thursday, February 07, 2019, 05:51 PM

• void ensureCapacity(int capacity)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5532-33 | Added on Thursday, February 07, 2019, 05:51 PM

• void trimToSize()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5535 | Added on Thursday, February 07, 2019, 05:52 PM

5.3.1. Accessing Array List Elements
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5539 | Added on Thursday, February 07, 2019, 05:53 PM

you use the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5539 | Added on Thursday, February 07, 2019, 05:54 PM

methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5544-45 | Added on Thursday, February 07, 2019, 05:55 PM

Do not call list.set(i, x) until
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5570-71 | Added on Thursday, February 07, 2019, 05:59 PM

Sometimes, you need to add elements in the middle of an array list. Use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5574-75 | Added on Friday, February 08, 2019, 09:52 AM

Similarly, you can remove an element from the middle of an array list:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5578 | Added on Friday, February 08, 2019, 09:53 AM

But if you store many elements and frequently insert and remove in the middle of a collection, consider using
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5579 | Added on Friday, February 08, 2019, 09:53 AM

instead.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5579-80 | Added on Friday, February 08, 2019, 09:53 AM

You can use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5580 | Added on Friday, February 08, 2019, 09:54 AM

to traverse the contents of an array list:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5604 | Added on Friday, February 08, 2019, 10:16 AM

java.util.ArrayList<T> 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5605 | Added on Friday, February 08, 2019, 10:17 AM

• void set(int index, T obj)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5609 | Added on Friday, February 08, 2019, 10:18 AM

• T get(int index)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5613 | Added on Friday, February 08, 2019, 10:19 AM

• void add(int index, T obj)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5616-17 | Added on Friday, February 08, 2019, 10:20 AM

• T remove(int index)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5620-21 | Added on Friday, February 08, 2019, 10:21 AM

5.3.2. Compatibility between Typed and Raw Array Lists
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5621-22 | Added on Friday, February 08, 2019, 10:26 AM

In your own code, you will always want to use type parameters for added safety.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5622 | Added on Friday, February 08, 2019, 07:24 PM

In this section, you will see how to interoperate with legacy code that does not use type parameters.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5648-49 | Added on Friday, February 08, 2019, 07:28 PM

you can tag the variable that receives the cast with the @SuppressWarnings("unchecked") annotation,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5652 | Added on Friday, February 08, 2019, 07:29 PM

5.4. Object Wrappers and Autoboxing
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5654-55 | Added on Friday, February 08, 2019, 07:29 PM

These kinds of classes are usually called wrappers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5656-57 | Added on Friday, February 08, 2019, 07:30 PM

The wrapper classes are immutable—you cannot change
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5657 | Added on Friday, February 08, 2019, 07:30 PM

They are also final, so you cannot subclass them.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5666-67 | Added on Friday, February 08, 2019, 07:32 PM

Another Java SE 5.0 innovation makes it easy to add and get array elements. The call list.add(3); is automatically translated to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5669 | Added on Friday, February 08, 2019, 07:33 PM

This conversion is called autoboxing.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5672-73 | Added on Friday, February 08, 2019, 07:33 PM

when you assign an Integer object to an int value, it is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5679-80 | Added on Friday, February 08, 2019, 07:35 PM

In most cases, you get the illusion that the primitive types and their wrappers are one and the same. There is just one point in which they differ considerably:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5695 | Added on Friday, February 08, 2019, 07:39 PM

objects—parseInt is a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5695-96 | Added on Friday, February 08, 2019, 07:40 PM

method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5713 | Added on Friday, February 08, 2019, 10:44 PM

If you do want to write a method to change numeric parameters, you can use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5718 | Added on Friday, February 08, 2019, 10:44 PM

java.lang.Integer 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5719 | Added on Friday, February 08, 2019, 10:45 PM

• int intValue()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5722 | Added on Friday, February 08, 2019, 10:45 PM

• static String toString(int i)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5725 | Added on Friday, February 08, 2019, 10:46 PM

• static String toString(int i, int radix)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5728 | Added on Friday, February 08, 2019, 10:46 PM

• static int parseInt(String s)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5729 | Added on Friday, February 08, 2019, 10:46 PM

• static int parseInt(String s, int radix)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5733 | Added on Friday, February 08, 2019, 10:47 PM

• static Integer valueOf(String s)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5734 | Added on Friday, February 08, 2019, 10:47 PM

• static Integer valueOf(String s, int radix)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5738 | Added on Friday, February 08, 2019, 10:48 PM

java.text.NumberFormat 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5739 | Added on Friday, February 08, 2019, 10:48 PM

• Number parse(String 
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5742 | Added on Friday, February 08, 2019, 10:49 PM

5.5. Methods with a Variable Number of Parameters
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5750-52 | Added on Saturday, February 09, 2019, 02:40 AM

public class PrintStream {    public PrintStream printf(String fmt, Object... args) { return format(fmt, args); } } Here, the ellipsis ... is part of the Java code. It denotes that the method can receive an arbitrary number of objects (in addition to the fmt parameter).
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5753 | Added on Saturday, February 09, 2019, 02:40 AM

The printf method actually receives two parameters:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5759-60 | Added on Saturday, February 09, 2019, 02:43 AM

You can define your own methods with variable parameters, and you can specify any type for the parameters, even a primitive type.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5768-69 | Added on Saturday, February 09, 2019, 02:44 AM

It is legal to pass an array as the last parameter of a method with variable parameters.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5776 | Added on Saturday, February 09, 2019, 02:47 AM

5.6. Enumeration Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5779 | Added on Saturday, February 09, 2019, 02:48 AM

The type defined by this declaration is actually a class. The class has exactly four instances—it is not possible 
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5781-82 | Added on Saturday, February 09, 2019, 02:50 AM

You can, if you like, add constructors, methods, and fields to an enumerated type. Of course, the constructors are only invoked when
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5787 | Added on Saturday, February 09, 2019, 02:51 AM

All enumerated types are subclasses of
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5787 | Added on Saturday, February 09, 2019, 02:52 AM

They inherit a number of methods from that class. The most useful one is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5789 | Added on Saturday, February 09, 2019, 02:53 AM

The converse of toString is the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5791 | Added on Saturday, February 09, 2019, 02:55 AM

Each enumerated type has a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5792 | Added on Saturday, February 09, 2019, 02:55 AM

that returns an array of all values of the enumeration.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5794 | Added on Saturday, February 09, 2019, 02:55 AM

The
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5795 | Added on Saturday, February 09, 2019, 02:56 AM

method yields the position of an enumerated constant in the enum declaration, counting from zero.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5796-97 | Added on Saturday, February 09, 2019, 02:56 AM

The short program in Listing 5.12 demonstrates how to work with enumerated types.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5799-5800 | Added on Saturday, February 09, 2019, 02:57 AM

The Enum class has a type parameter that we have ignored for simplicity. For example, the enumerated type Size actually extends Enum<Size>. The type parameter is used in the compareTo method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5802-3 | Added on Saturday, February 09, 2019, 02:57 AM

java.lang.Enum<E> 5.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5804 | Added on Saturday, February 09, 2019, 02:58 AM

• static Enum valueOf(Class enumClass, String name)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5806 | Added on Saturday, February 09, 2019, 02:58 AM

• String toString()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5809 | Added on Saturday, February 09, 2019, 02:58 AM

• int ordinal()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5811 | Added on Saturday, February 09, 2019, 02:59 AM

• int compareTo(E other)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5828-29 | Added on Saturday, February 09, 2019, 09:31 AM

5.7. Reflection
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5829-30 | Added on Saturday, February 09, 2019, 09:32 AM

The reflection library gives you a very rich and elaborate toolset to write programs that manipulate Java code dynamically.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5833 | Added on Saturday, February 09, 2019, 01:32 PM

A program that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5833 | Added on Saturday, February 09, 2019, 01:33 PM

is called reflective.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5833-34 | Added on Saturday, February 09, 2019, 01:33 PM

The reflection mechanism is extremely powerful. As the next sections show, you can use it to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5839-40 | Added on Saturday, February 09, 2019, 01:34 PM

it is of interest mainly to tool builders, not application programmers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5841-42 | Added on Saturday, February 09, 2019, 01:35 PM

5.7.1. The Class Class
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5842-43 | Added on Saturday, February 09, 2019, 01:36 PM

While your program is running, the Java runtime system always maintains what is called
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5843 | Added on Saturday, February 09, 2019, 01:37 PM

This information keeps track of the class to which each object belongs.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5843-44 | Added on Saturday, February 09, 2019, 01:37 PM

Runtime type information is used by the virtual machine to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5844-45 | Added on Saturday, February 09, 2019, 01:38 PM

you can also access this information by working with a special Java class. The class that holds this information is called, somewhat confusingly, Class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5849 | Added on Saturday, February 09, 2019, 01:39 PM

Probably the most commonly used method of Class is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5857-58 | Added on Saturday, February 09, 2019, 01:41 PM

You can obtain a Class object corresponding to a class name by using
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5869-70 | Added on Saturday, February 09, 2019, 01:44 PM

A third method for obtaining an object of type Class is a convenient shorthand. If T is any Java type, then T.class is the matching class object. For example:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5873 | Added on Saturday, February 09, 2019, 01:45 PM

Note that a Class object really describes a type, which may or may not be a class. For example,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5886 | Added on Saturday, February 09, 2019, 09:14 PM

Therefore, you can use the == operator to compare class objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5885-86 | Added on Saturday, February 09, 2019, 09:14 PM

The virtual machine manages a unique Class object for each type. Therefore, you can use the == operator to compare class objects.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5888 | Added on Saturday, February 09, 2019, 09:15 PM

Another example of a useful method is one that lets you create an instance of a class on the fly. This method is called,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5889 | Added on Saturday, February 09, 2019, 09:15 PM

For example,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5892-93 | Added on Saturday, February 09, 2019, 09:17 PM

A combination of forName and newInstance lets you create an object from a class name stored in a string.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5905 | Added on Saturday, February 09, 2019, 09:38 PM

5.7.2. A Primer on Catching Exceptions
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5911 | Added on Saturday, February 09, 2019, 11:59 PM

There are two kinds of exceptions:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5911 | Added on Sunday, February 10, 2019, 12:00 AM

With
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5911-12 | Added on Sunday, February 10, 2019, 12:01 AM

the compiler checks that you provide a handler.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5917 | Added on Sunday, February 10, 2019, 02:21 AM

Place one or more statements that might throw checked exceptions inside a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5917-18 | Added on Sunday, February 10, 2019, 02:21 AM

Then provide the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5918 | Added on Sunday, February 10, 2019, 02:22 AM

in the catch clause.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5926-27 | Added on Sunday, February 10, 2019, 02:25 AM

Throwable is the superclass of
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5928 | Added on Sunday, February 10, 2019, 02:25 AM

You only need to supply an exception handler for
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5930-31 | Added on Sunday, February 10, 2019, 02:26 AM

java.lang.Class 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5932 | Added on Sunday, February 10, 2019, 02:27 AM

• static Class forName(String className)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5934-35 | Added on Sunday, February 10, 2019, 02:27 AM

• Object newInstance()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5937 | Added on Sunday, February 10, 2019, 02:27 AM

java.lang.reflect.Constructor 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5938 | Added on Sunday, February 10, 2019, 02:27 AM

• Object newInstance(Object[] args)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5942-43 | Added on Sunday, February 10, 2019, 11:17 AM

java.lang.Throwable 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5943-44 | Added on Sunday, February 10, 2019, 11:17 AM

• void printStackTrace()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5946 | Added on Sunday, February 10, 2019, 11:17 AM

5.7.3. Using Reflection to Analyze the Capabilities of Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5948 | Added on Sunday, February 10, 2019, 11:18 AM

The three classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5948-49 | Added on Sunday, February 10, 2019, 11:18 AM

in the java.lang.reflect package describe the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5949-50 | Added on Sunday, February 10, 2019, 11:19 AM

of a class, respectively. All three classes have a method called getName
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5949-50 | Added on Sunday, February 10, 2019, 11:19 AM

of a class, respectively. All three classes have a method called getName that returns
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5950 | Added on Sunday, February 10, 2019, 11:20 AM

The Field class has a method getType that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5950 | Added on Sunday, February 10, 2019, 11:20 AM

The Field class has a method getType that returns
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5951 | Added on Sunday, February 10, 2019, 11:21 AM

The Method and Constructor classes have methods to report
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5952 | Added on Sunday, February 10, 2019, 11:21 AM

type. All three of these classes also have a method called getModifiers that returns
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5953-54 | Added on Sunday, February 10, 2019, 11:22 AM

You can then use the static methods in the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5954 | Added on Sunday, February 10, 2019, 11:23 AM

class in the java.lang.reflect package to analyze the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5957 | Added on Sunday, February 10, 2019, 11:40 AM

You can also use the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5957 | Added on Sunday, February 10, 2019, 11:40 AM

to print the modifiers.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5958 | Added on Sunday, February 10, 2019, 11:41 AM

The
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5958 | Added on Sunday, February 10, 2019, 11:42 AM

and
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5958 | Added on Sunday, February 10, 2019, 11:43 AM

methods of the Class class return arrays of the public
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5959 | Added on Sunday, February 10, 2019, 11:44 AM

The
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5960 | Added on Sunday, February 10, 2019, 11:44 AM

and
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 5960 | Added on Sunday, February 10, 2019, 11:48 AM

methods of the Class class return arrays consisting of
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6030-31 | Added on Sunday, February 10, 2019, 12:13 PM

What is remarkable about this program is that it can analyze any class that the Java interpreter can load, not just the classes that were available when the program was compiled.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6033 | Added on Sunday, February 10, 2019, 12:14 PM

java.lang.Class 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6034-36 | Added on Sunday, February 10, 2019, 12:14 PM

• Field[] getFields() 1.1 • Field[] getDeclaredFields() 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6040-42 | Added on Sunday, February 10, 2019, 12:16 PM

• Method[] getMethods() 1.1 • Method[] getDeclaredMethods() 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6046-48 | Added on Sunday, February 10, 2019, 12:17 PM

• Constructor[] getConstructors() 1.1 • Constructor[] getDeclaredConstructors() 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6051-54 | Added on Sunday, February 10, 2019, 12:18 PM

java.lang.reflect.Field 1.1 java.lang.reflect.Method 1.1 java.lang.reflect.Constructor 1.1 • Class getDeclaringClass()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6057 | Added on Sunday, February 10, 2019, 12:18 PM

• Class[] 
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6060 | Added on Sunday, February 10, 2019, 12:19 PM

• int getModifiers()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6063 | Added on Sunday, February 10, 2019, 12:21 PM

• String getName()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6065-66 | Added on Sunday, February 10, 2019, 12:22 PM

• Class[] getParameterTypes()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6068-69 | Added on Sunday, February 10, 2019, 12:22 PM

• Class getReturnType() (in Method classes)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6071-72 | Added on Sunday, February 10, 2019, 12:23 PM

java.lang.reflect.Modifier 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6073 | Added on Sunday, February 10, 2019, 12:23 PM

• static String toString(int modifiers)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6075-88 | Added on Sunday, February 10, 2019, 12:24 PM

• static boolean isAbstract(int modifiers) • static boolean isFinal(int modifiers) • static boolean isInterface(int modifiers) • static boolean isNative(int modifiers) • static boolean isPrivate(int modifiers) • static boolean isProtected(int modifiers) • static boolean isPublic(int modifiers) • static boolean isStatic(int modifiers) • static boolean isStrict(int modifiers) • static boolean isSynchronized(int modifiers) • static boolean isVolatile(int modifiers)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6091 | Added on Sunday, February 10, 2019, 12:25 PM

5.7.4. Using Reflection to Analyze Objects at Runtime
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6096 | Added on Sunday, February 10, 2019, 12:28 PM

But reflection lets you look at fields of objects
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6097 | Added on Sunday, February 10, 2019, 12:28 PM

The key method to achieve this examination is the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6097-98 | Added on Sunday, February 10, 2019, 12:29 PM

method in the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6098 | Added on Sunday, February 10, 2019, 12:29 PM

class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6106 | Added on Sunday, February 10, 2019, 12:34 PM

You can only use get to get the values of accessible fields.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6108-9 | Added on Sunday, February 10, 2019, 12:35 PM

The default behavior of the reflection mechanism is to respect Java access control. However, if a Java program is not controlled by a security manager that disallows it, you can override access control. To do this, invoke the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6109 | Added on Sunday, February 10, 2019, 12:36 PM

method on a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6110 | Added on Sunday, February 10, 2019, 12:36 PM

object.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6111 | Added on Sunday, February 10, 2019, 12:37 PM

The
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6111-13 | Added on Sunday, February 10, 2019, 12:37 PM

method is a method of the AccessibleObject class, the common super-class of the Field, Method, and Constructor classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6115-16 | Added on Sunday, February 10, 2019, 12:38 PM

suppose we want to look at the salary field. That is a double, and in Java, number types are not objects. To handle this, you can either use the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6116-17 | Added on Sunday, February 10, 2019, 12:39 PM

method of the Field class, or you can call get, whereby the reflection mechanism
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6118-19 | Added on Sunday, February 10, 2019, 12:40 PM

The call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6119 | Added on Sunday, February 10, 2019, 12:40 PM

sets the field represented by f of the object obj to the new value.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6147-48 | Added on Sunday, February 10, 2019, 02:23 PM

You can use this generic toString method to implement the toString methods of your own classes, like this:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6190-91 | Added on Sunday, February 10, 2019, 02:54 PM

java.lang.reflect.AccessibleObject 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6192 | Added on Sunday, February 10, 2019, 02:54 PM

• void setAccessible(boolean flag)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6195-96 | Added on Sunday, February 10, 2019, 02:55 PM

• boolean isAccessible()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6198 | Added on Sunday, February 10, 2019, 02:55 PM

• static void setAccessible(AccessibleObject[]
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6201 | Added on Sunday, February 10, 2019, 02:55 PM

java.lang.Class 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6202-4 | Added on Sunday, February 10, 2019, 02:56 PM

• Field getField(String name) • Field[] getFields()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6206-7 | Added on Sunday, February 10, 2019, 02:56 PM

• Field getDeclaredField(String name) • Field[] getDeclaredFields()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6210 | Added on Sunday, February 10, 2019, 03:37 PM

java.lang.reflect.Field 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6211-12 | Added on Sunday, February 10, 2019, 03:37 PM

• Object get(Object obj)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6214 | Added on Sunday, February 10, 2019, 03:38 PM

• void set(Object obj, Object newValue)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6217 | Added on Sunday, February 10, 2019, 03:40 PM

5.7.5. Using Reflection to Write Generic Array Code
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6217 | Added on Sunday, February 10, 2019, 03:41 PM

The
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6218 | Added on Sunday, February 10, 2019, 03:41 PM

class in the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6218 | Added on Sunday, February 10, 2019, 03:41 PM

allows you to create arrays dynamically.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 6218 | Added on Sunday, February 10, 2019, 03:42 PM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6218 | Added on Sunday, February 10, 2019, 03:42 PM

This is used, for example, in the implementation of
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6219 | Added on Sunday, February 10, 2019, 03:46 PM

method in the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6219 | Added on Sunday, February 10, 2019, 03:46 PM

class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6230 | Added on Sunday, February 10, 2019, 04:09 PM

a Java array remembers
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6231 | Added on Sunday, February 10, 2019, 04:09 PM

It is legal to cast an
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6231-32 | Added on Sunday, February 10, 2019, 04:10 PM

Employee[] temporarily to an Object[] array and then cast it back, but an array that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6232 | Added on Sunday, February 10, 2019, 04:10 PM

started its life as an Object[] array can never be
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6231-32 | Added on Sunday, February 10, 2019, 04:11 PM

It is legal to cast an Employee[] temporarily to an Object[] array and then cast it back, but an array that started its life as an Object[] array can never be
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6233 | Added on Sunday, February 10, 2019, 04:12 PM

To write this kind of generic array code, we need to be able to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6233-34 | Added on Sunday, February 10, 2019, 04:13 PM

For this, we need
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6234 | Added on Sunday, February 10, 2019, 04:13 PM

in the java.lang.reflect package.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6234 | Added on Sunday, February 10, 2019, 04:14 PM

The key is the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6234 | Added on Sunday, February 10, 2019, 04:14 PM

method of
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6235 | Added on Sunday, February 10, 2019, 04:15 PM

You must supply
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6235 | Added on Sunday, February 10, 2019, 04:16 PM

as parameters to this method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6238 | Added on Sunday, February 10, 2019, 04:17 PM

We obtain the length by calling
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6256 | Added on Sunday, February 10, 2019, 04:22 PM

java.lang.reflect.Array 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6257-59 | Added on Sunday, February 10, 2019, 04:22 PM

• static Object get(Object array, int index) • static xxx getXxx(Object array, int index)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6260-61 | Added on Sunday, February 10, 2019, 04:24 PM

(xxx is one of the primitive types
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6263 | Added on Sunday, February 10, 2019, 04:25 PM

• static void set(Object array, int index, Object newValue)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 6264 | Added on Sunday, February 10, 2019, 04:26 PM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6264-65 | Added on Sunday, February 10, 2019, 04:26 PM

• static set Xxx(Object array, int index, xxx newValue)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6269 | Added on Sunday, February 10, 2019, 04:27 PM

• static int getLength(Object array)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6271-73 | Added on Sunday, February 10, 2019, 04:27 PM

• static Object newInstance(Class componentType, int length) • static Object
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6273 | Added on Sunday, February 10, 2019, 04:28 PM

newInstance(Class componentType, int[] lengths)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6300 | Added on Sunday, February 10, 2019, 06:50 PM

5.7.6. Invoking Arbitrary Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6303-4 | Added on Sunday, February 10, 2019, 06:51 PM

the reflection mechanism allows you to call arbitrary methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6310 | Added on Sunday, February 10, 2019, 06:55 PM

the Method class has an
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6310-11 | Added on Sunday, February 10, 2019, 06:55 PM

method that lets you call the method that is wrapped in the current Method object. The signature for the invoke method is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6312 | Added on Sunday, February 10, 2019, 06:56 PM

The first parameter is the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6312-13 | Added on Sunday, February 10, 2019, 06:57 PM

and the remaining objects provide
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6313 | Added on Sunday, February 10, 2019, 06:57 PM

For a static method, the first parameter is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6313-14 | Added on Sunday, February 10, 2019, 06:57 PM

can set it to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6314-15 | Added on Sunday, February 10, 2019, 07:01 PM

For example, if m1 represents the getName method of the Employee class, the following code shows how you can call it:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6316-17 | Added on Sunday, February 10, 2019, 07:01 PM

If the return type is a primitive type, the invoke method will return the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6320 | Added on Sunday, February 10, 2019, 07:02 PM

How do you obtain a Method object?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6323-24 | Added on Sunday, February 10, 2019, 07:10 PM

you must also supply the parameter types of the desired method. The signature of getMethod is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6321-22 | Added on Sunday, February 10, 2019, 07:16 PM

Or, you can call the getMethod method of the Class class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6323-24 | Added on Sunday, February 10, 2019, 07:16 PM

you must also supply the parameter types of the desired method. The signature of getMethod is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6371 | Added on Sunday, February 10, 2019, 08:19 PM

What happens if you invoke a method with the wrong parameters?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6374-75 | Added on Sunday, February 10, 2019, 08:42 PM

Moreover, code that uses reflection to get at method pointers is significantly slower than code that simply calls methods directly.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6375-76 | Added on Sunday, February 10, 2019, 08:43 PM

For that reason, we suggest that you use Method objects in your own programs only when absolutely necessary.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6379 | Added on Sunday, February 10, 2019, 08:44 PM

java.lang.reflect.Method 1.1
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6380-81 | Added on Sunday, February 10, 2019, 08:44 PM

• public Object invoke(Object implicitParameter, Object[] explicitParameters)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6384-85 | Added on Sunday, February 10, 2019, 08:46 PM

5.8. Design Hints for Inheritance
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6385-86 | Added on Sunday, February 10, 2019, 08:46 PM

some hints that we have found useful when using inheritance.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6455 | Added on Sunday, February 10, 2019, 09:03 PM

The first technique, called interfaces, is a way of describing
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6456 | Added on Sunday, February 10, 2019, 09:04 PM

A class can implement one or more interfaces.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6464 | Added on Sunday, February 10, 2019, 09:10 PM

6.1. Interfaces
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6465 | Added on Sunday, February 10, 2019, 09:11 PM

an interface is not a class but a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 6474 | Added on Sunday, February 10, 2019, 09:15 PM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6474 | Added on Sunday, February 10, 2019, 09:16 PM

As of Java SE 5.0, the Comparable interface has been enhanced to be a generic type.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6484 | Added on Sunday, February 10, 2019, 09:18 PM

All methods of an interface are automatically public.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6490 | Added on Sunday, February 10, 2019, 09:33 PM

What is more important, however, is what interfaces cannot supply.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6490-91 | Added on Sunday, February 10, 2019, 09:34 PM

Interfaces never have instance fields, and the methods are never implemented in the interface.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6495 | Added on Monday, February 11, 2019, 09:49 AM

To make a class implement an interface, you carry out two steps:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6498 | Added on Monday, February 11, 2019, 09:53 AM

To declare that a class implements an interface, use the implements keyword:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6498 | Added on Monday, February 11, 2019, 09:54 AM

To declare that a class implements an interface, use the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6507-8 | Added on Tuesday, February 12, 2019, 12:32 AM

In the interface declaration, the compareTo method was not declared public because
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6508-9 | Added on Tuesday, February 12, 2019, 12:33 AM

However, when implementing the interface, you must declare the method as public. Otherwise, the compiler assumes that the method has
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6509-10 | Added on Tuesday, February 12, 2019, 12:33 AM

visibility—the default for a class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6511-12 | Added on Tuesday, February 12, 2019, 09:17 AM

As of Java SE 5.0, we can do a little better. We’ll implement the Comparable<Employee> interface type instead.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6518-20 | Added on Tuesday, February 12, 2019, 09:21 AM

The compareTo method of the Comparable interface returns an integer. If the objects are not equal, it does not matter what negative or positive value you return. This flexibility can be useful when you are comparing integer fields. For example,
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6530-31 | Added on Tuesday, February 12, 2019, 09:22 AM

The reason for interfaces is that the Java programming language is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6574-76 | Added on Tuesday, February 12, 2019, 09:44 AM

java.lang.Comparable<T> 1.0 • int compareTo(T
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6574-75 | Added on Tuesday, February 12, 2019, 09:45 AM

java.lang.Comparable<T> 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6576 | Added on Tuesday, February 12, 2019, 09:45 AM

• int compareTo(T other)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6579-80 | Added on Tuesday, February 12, 2019, 09:45 AM

java.util.Arrays 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6581 | Added on Tuesday, February 12, 2019, 09:46 AM

• static void sort(Object[] a)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6584-85 | Added on Tuesday, February 12, 2019, 10:00 AM

java.lang.Integer 7
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6586 | Added on Tuesday, February 12, 2019, 10:01 AM

• static int compare(int x, int y)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6589 | Added on Tuesday, February 12, 2019, 10:02 AM

java.lang.Double 7
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6590 | Added on Tuesday, February 12, 2019, 10:02 AM

• static int compare(double x, double y)
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1157-58 | Added on Wednesday, February 13, 2019, 01:43 PM

She filled another box with various items and knickknacks that she wanted to keep, then took a taxi back to Mosebacke.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1163-64 | Added on Wednesday, February 13, 2019, 02:42 PM

She bought two Karlanda sofas with sand-coloured upholstery, five Po+nng armchairs, two round side tables of clear-lacquered birch, a Svansbo coffee table, and several Lack occasional tables.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6614-17 | Added on Wednesday, February 13, 2019, 07:18 PM

If subclasses have different notions of comparison, then you should outlaw comparison of objects that belong to different classes. Each compareTo method should start out with the test if (getClass() != other.getClass()) throw new ClassCastException();
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6618-19 | Added on Wednesday, February 13, 2019, 07:19 PM

If there is a common algorithm for comparing subclass objects, simply provide a single compareTo method in the superclass and declare it as final.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6624 | Added on Wednesday, February 13, 2019, 07:20 PM

6.1.1. Properties of Interfaces
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6627 | Added on Wednesday, February 13, 2019, 07:21 PM

However, even though you can’t construct interface objects, you can still declare interface variables.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6628-29 | Added on Wednesday, February 13, 2019, 07:21 PM

An interface variable must refer to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6630 | Added on Wednesday, February 13, 2019, 07:22 PM

just as you use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6631 | Added on Wednesday, February 13, 2019, 07:23 PM

to check whether an object is of a specific class, you can use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6631-32 | Added on Wednesday, February 13, 2019, 07:23 PM

to check whether an object implements an interface:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6633 | Added on Wednesday, February 13, 2019, 07:24 PM

Just as you can build hierarchies of classes, you can
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6633 | Added on Wednesday, February 13, 2019, 07:24 PM

interfaces.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6639-40 | Added on Wednesday, February 13, 2019, 07:26 PM

Although you cannot put
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6640 | Added on Wednesday, February 13, 2019, 07:26 PM

in an interface, you can supply constants in them.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6643-44 | Added on Wednesday, February 13, 2019, 07:27 PM

Just as methods in an interface are automatically
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6644 | Added on Wednesday, February 13, 2019, 07:27 PM

fields are always
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6649 | Added on Wednesday, February 13, 2019, 07:28 PM

Some interfaces define just constants and no methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6653 | Added on Wednesday, February 13, 2019, 07:29 PM

While each class can have only one superclass, classes can implement multiple interfaces.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6658 | Added on Wednesday, February 13, 2019, 07:30 PM

Use
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6658-59 | Added on Wednesday, February 13, 2019, 07:31 PM

to separate the interfaces that describe the characteristics that you want to supply.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6659 | Added on Wednesday, February 13, 2019, 07:31 PM

6.1.2. Interfaces and Abstract Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6660-61 | Added on Wednesday, February 13, 2019, 07:33 PM

If you read the section about abstract classes in Chapter 5, you may wonder why the designers of the Java programming language bothered with introducing the concept of interfaces. Why can’t Comparable simply be an abstract class:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6683 | Added on Thursday, February 14, 2019, 01:03 AM

6.2. Object Cloning
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6693 | Added on Thursday, February 14, 2019, 01:05 AM

The clone method is a protected method of Object, which means that your code
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6694 | Added on Thursday, February 14, 2019, 01:05 AM

Only the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6694 | Added on Thursday, February 14, 2019, 01:05 AM

class can clone Employee objects. There is a reason for this restriction.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6702-3 | Added on Thursday, February 14, 2019, 01:12 AM

Does it matter if the copy is shallow? It depends.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6705-6 | Added on Thursday, February 14, 2019, 01:13 AM

Quite frequently, however, subobjects are mutable, and you must redefine the clone method to make a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6707-8 | Added on Thursday, February 14, 2019, 01:13 AM

For every class, you need to decide whether
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6711-12 | Added on Thursday, February 14, 2019, 01:14 AM

The third option is actually the default. To choose either the first or the second option, a class must
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6718-19 | Added on Thursday, February 14, 2019, 01:16 AM

A subclass can call a protected clone method only to clone
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6719 | Added on Thursday, February 14, 2019, 01:17 AM

You must redefine clone to be
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6720-21 | Added on Thursday, February 14, 2019, 01:19 AM

In this case, the appearance of the Cloneable interface has nothing to do with the normal use of interfaces.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6726-27 | Added on Thursday, February 14, 2019, 09:34 AM

The Cloneable interface is one of a handful of tagging interfaces that Java provides. (Some programmers call them marker interfaces.)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6728 | Added on Thursday, February 14, 2019, 09:35 AM

A tagging interface has no
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6728 | Added on Thursday, February 14, 2019, 09:35 AM

its only purpose is to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6732-33 | Added on Thursday, February 14, 2019, 09:36 AM

Even if the default (shallow copy) implementation of clone is adequate, you still need to implement the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6733 | Added on Thursday, February 14, 2019, 09:36 AM

redefine clone to be
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6733-34 | Added on Thursday, February 14, 2019, 09:37 AM

and call super.clone().
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1176-78 | Added on Thursday, February 14, 2019, 12:41 PM

She made her way through the entire warehouse and bought a good supply of sheets, pillowcases, hand towels, duvets, blankets, pillows, a starter pack of stainless steel cutlery, some crockery, pots and pans, cutting boards, three big rugs, several work lamps, and a huge quantity of office supplies folders, file boxes, wastepaper baskets, storage boxes, and the like.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6756-60 | Added on Friday, February 15, 2019, 10:12 AM

public Employee clone() {    try    {       return (Employee) super.clone();    }    catch (CloneNotSupportedException e) { return null; }    // this won't happen, since we are Cloneable } This is appropriate for final classes. Otherwise, it is a good idea to leave the throws specifier in place. That gives subclasses the option of
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6760-62 | Added on Friday, February 15, 2019, 02:09 PM

You have to be careful about cloning of subclasses. For example, once you have defined the clone method for the Employee class, anyone can use it to clone Manager objects. Can the Employee clone method do the job? It depends on
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6806-7 | Added on Friday, February 15, 2019, 08:42 PM

All array types have a clone method that is public, not protected. You can use it to make a new array that contains copies of all elements.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6815 | Added on Friday, February 15, 2019, 08:43 PM

6.3. Interfaces and Callbacks
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6815-16 | Added on Friday, February 15, 2019, 08:43 PM

A common pattern in programming is the callback pattern. In this pattern, you want to specify
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6816 | Added on Friday, February 15, 2019, 08:44 PM

whenever
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6818-19 | Added on Friday, February 15, 2019, 08:44 PM

The javax.swing package contains a Timer class that is useful if you want to be notified whenever a time interval has elapsed.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6833-34 | Added on Saturday, February 16, 2019, 03:00 AM

Whenever you would use a function pointer in C++, you should consider using an interface in Java.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6872 | Added on Saturday, February 16, 2019, 03:05 AM

javax.swing.JOptionPane 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6873 | Added on Saturday, February 16, 2019, 03:06 AM

• static void
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6873-74 | Added on Saturday, February 16, 2019, 03:06 AM

showMessageDialog(Component parent, Object message)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6877 | Added on Saturday, February 16, 2019, 03:07 AM

javax.swing.Timer 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6878-79 | Added on Saturday, February 16, 2019, 03:07 AM

• Timer(int interval, ActionListener listener)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6881 | Added on Saturday, February 16, 2019, 03:07 AM

• void start()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6884 | Added on Saturday, February 16, 2019, 03:08 AM

• void stop()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6887 | Added on Saturday, February 16, 2019, 03:08 AM

java.awt.Toolkit 1.0
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6888 | Added on Saturday, February 16, 2019, 03:09 AM

• static Toolkit getDefaultToolkit()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6891 | Added on Saturday, February 16, 2019, 03:09 AM

• void beep()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6893 | Added on Saturday, February 16, 2019, 03:09 AM

6.4. Inner Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6893 | Added on Saturday, February 16, 2019, 03:10 AM

An inner class is a class that is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6894 | Added on Saturday, February 16, 2019, 03:10 AM

Why would you want to do that? There are three reasons:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6933-34 | Added on Saturday, February 16, 2019, 05:56 PM

6.4.1. Use of an Inner Class to Access Object State
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6935-36 | Added on Saturday, February 16, 2019, 05:58 PM

We refactor the TimerTest example and extract a TalkingClock class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6953-54 | Added on Saturday, February 16, 2019, 06:27 PM

For this to work, an object of an inner class always gets an implicit reference to the object that created it.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6956 | Added on Saturday, February 16, 2019, 06:30 PM

This reference is invisible in the definition of the inner class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6975-76 | Added on Saturday, February 16, 2019, 06:35 PM

We could have declared the TimePrinter class as private. Then only
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6976 | Added on Saturday, February 16, 2019, 06:36 PM

would be able to construct
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 6976-77 | Added on Saturday, February 16, 2019, 06:36 PM

Only inner classes can be private.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7000-7001 | Added on Saturday, February 16, 2019, 06:43 PM

6.4.2. Special Syntax Rules for Inner Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7002 | Added on Sunday, February 17, 2019, 01:35 AM

The expression
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7004 | Added on Sunday, February 17, 2019, 01:36 AM

denotes the outer class reference.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7008 | Added on Sunday, February 17, 2019, 01:37 AM

Conversely, you can write the inner object constructor more explicitly, using the syntax
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7011-12 | Added on Sunday, February 17, 2019, 01:38 AM

the outer class reference of the newly constructed TimePrinter object is set to the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7012-13 | Added on Sunday, February 17, 2019, 01:38 AM

reference of the method that creates the inner class object. This is the most common case.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7013-14 | Added on Sunday, February 17, 2019, 01:44 AM

However, it is also possible to set the outer class reference to another object by explicitly naming it.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7020 | Added on Sunday, February 17, 2019, 01:45 AM

6.4.3. Are Inner Classes Useful? Actually Necessary? Secure?
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7025-27 | Added on Sunday, February 17, 2019, 01:47 AM

it is worth noting that inner classes are a phenomenon of the compiler, not the virtual machine. Inner classes are translated into regular class files with $ (dollar signs) delimiting outer and inner class names, and the virtual machine does not have any special knowledge about them.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7078-79 | Added on Sunday, February 17, 2019, 01:58 AM

The synthesized constructors and methods can get quite convoluted.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7091 | Added on Sunday, February 17, 2019, 09:56 AM

6.4.4. Local Inner Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7094 | Added on Sunday, February 17, 2019, 09:58 AM

In a situation like this, you can define the class locally in a single method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7102 | Added on Sunday, February 17, 2019, 10:01 AM

Local classes are never declared with an access specifier
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7102-3 | Added on Sunday, February 17, 2019, 10:01 AM

Their scope is always restricted to the block in which they are declared.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7103 | Added on Sunday, February 17, 2019, 10:02 AM

Local classes have one great advantage:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7105-6 | Added on Sunday, February 17, 2019, 10:15 AM

6.4.5. Accessing final Variables from Outer Methods
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7106 | Added on Sunday, February 17, 2019, 10:15 AM

Local classes have another advantage over other inner classes.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7107 | Added on Sunday, February 17, 2019, 10:16 AM

they can even access
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7107 | Added on Sunday, February 17, 2019, 10:16 AM

However, those
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7107 | Added on Sunday, February 17, 2019, 10:17 AM

must be declared
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7147 | Added on Sunday, February 17, 2019, 11:13 AM

The final keyword can be applied to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7147-48 | Added on Sunday, February 17, 2019, 11:13 AM

In all cases it means the same thing:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7149-50 | Added on Sunday, February 17, 2019, 11:14 AM

However, you don’t have to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7150 | Added on Sunday, February 17, 2019, 11:14 AM

when you define it.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Note Loc. 7114 | Added on Sunday, February 17, 2019, 12:13 PM

Since ActionListener is an interface, how come it is instantiated here 
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7153 | Added on Sunday, February 17, 2019, 12:38 PM

A final variable that isn’t initialized when it is defined is often called a
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7173 | Added on Sunday, February 17, 2019, 12:42 PM

6.4.6. Anonymous Inner Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7173-75 | Added on Sunday, February 17, 2019, 12:44 PM

When using local inner classes, you can often go a step further. If you want to make only a single object of this class, you don’t even need to give the class a name. Such a class is called an anonymous inner class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7184 | Added on Sunday, February 17, 2019, 12:56 PM

In general, the syntax is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7186-88 | Added on Sunday, February 17, 2019, 12:56 PM

Here, SuperType can be an interface, such as ActionListener; then, the inner class implements that interface. SuperType can also be a class; then, the inner class extends that class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7188 | Added on Sunday, February 17, 2019, 12:57 PM

An anonymous inner class cannot have constructors because
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7190 | Added on Sunday, February 17, 2019, 12:59 PM

In particular, whenever an inner class implements an interface, it cannot have
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7190-91 | Added on Sunday, February 17, 2019, 01:00 PM

Nevertheless, you must supply a set of parentheses as in
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7197 | Added on Sunday, February 17, 2019, 01:07 PM

If the closing parenthesis of the construction parameter list is followed by
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7198 | Added on Sunday, February 17, 2019, 01:07 PM

then an anonymous inner class is being defined.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7225-26 | Added on Sunday, February 17, 2019, 02:08 PM

The following trick, called double brace initialization, takes advantage of the inner class syntax.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7231-33 | Added on Sunday, February 17, 2019, 02:21 PM

If you don’t need the array list again, it would be nice to make it anonymous. But then how can you add the elements? Here is how: invite(new ArrayList<String>() {{ add("Harry"); add("Tony"); }})
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7234-35 | Added on Sunday, February 17, 2019, 02:21 PM

Note the double braces. The outer braces make
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7234-35 | Added on Sunday, February 17, 2019, 02:22 PM

Note the double braces. The outer braces make an
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7235 | Added on Sunday, February 17, 2019, 02:22 PM

The inner braces are an
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7238-39 | Added on Sunday, February 17, 2019, 02:25 PM

It is often convenient to make an anonymous subclass that is almost, but not quite, like its superclass. But you need to be careful with the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7239 | Added on Sunday, February 17, 2019, 02:27 PM

method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7245-46 | Added on Sunday, February 17, 2019, 02:29 PM

When you produce logging or debugging messages, you often want to include the name of the current class, such as
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7253-54 | Added on Sunday, February 17, 2019, 02:32 PM

Here, new Object(){} makes an anonymous object of an anonymous subclass of Object, and getEnclosingClass gets its enclosing class—that is, the class containing the static method.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7255 | Added on Sunday, February 17, 2019, 02:33 PM

6.4.7. Static Inner Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7256-57 | Added on Sunday, February 17, 2019, 02:34 PM

You can suppress the generation of that reference by declaring the inner class static.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7284 | Added on Sunday, February 17, 2019, 03:34 PM

Of course, only
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7284 | Added on Sunday, February 17, 2019, 03:34 PM

can be declared static.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7284-85 | Added on Sunday, February 17, 2019, 03:35 PM

A static inner class is exactly like any other inner class, except that
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7291-92 | Added on Sunday, February 17, 2019, 04:21 PM

Use a static inner class whenever the inner class
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7326 | Added on Sunday, February 17, 2019, 06:26 PM

6.5. Proxies
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7327-28 | Added on Sunday, February 17, 2019, 06:29 PM

You can use a proxy to create, at runtime, new classes that implement a given set of interfaces.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7329-30 | Added on Sunday, February 17, 2019, 06:33 PM

This is not a common situation for application programmers, and you should feel free to skip this section if you are not interested in advanced wizardry. However, for certain systems programming applications, the flexibility that proxies offer can be very important.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7332-33 | Added on Sunday, February 17, 2019, 06:35 PM

To construct an actual class, you can simply use the newInstance method or use reflection to find a constructor.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7335-36 | Added on Sunday, February 17, 2019, 07:01 PM

The proxy class can create brand-new classes at runtime. Such a proxy class implements the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7340 | Added on Sunday, February 17, 2019, 07:03 PM

Instead, you must supply an invocation handler.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7340 | Added on Sunday, February 17, 2019, 07:07 PM

Instead, you must supply an invocation handler. An invocation handler is
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7425 | Added on Monday, February 18, 2019, 07:23 PM

6.5.1. Properties of Proxy Classes
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7426 | Added on Monday, February 18, 2019, 07:24 PM

Remember that proxy classes are created on the fly in a running program.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7427-28 | Added on Monday, February 18, 2019, 07:25 PM

All proxy classes extend the class Proxy.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7427 | Added on Monday, February 18, 2019, 07:25 PM

All proxy classes extend the class
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7428 | Added on Monday, February 18, 2019, 07:26 PM

A proxy class has only one instance field—the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7428 | Added on Monday, February 18, 2019, 07:26 PM

which is defined in the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7428-29 | Added on Monday, February 18, 2019, 07:27 PM

Any additional data required to carry out the proxy objects’ tasks must be stored in
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7431 | Added on Monday, February 18, 2019, 07:27 PM

All proxy classes override the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7431 | Added on Monday, February 18, 2019, 07:28 PM

methods of the Object class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7431-32 | Added on Monday, February 18, 2019, 07:29 PM

Like all proxy methods, these methods simply call
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7432 | Added on Monday, February 18, 2019, 07:29 PM

on the invocation handler.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7433-34 | Added on Monday, February 18, 2019, 07:30 PM

Proxy class in Oracle’s virtual machine generates class names that begin with the string
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7435-36 | Added on Monday, February 18, 2019, 07:31 PM

There is only one proxy class for a particular class loader and ordered set of interfaces. That is, if you call the newProxyInstance method twice with the same class loader and interface array, you get two objects of the same class. You can also obtain that class with the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7437 | Added on Monday, February 18, 2019, 07:31 PM

method:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7438 | Added on Monday, February 18, 2019, 07:32 PM

A proxy class is always
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7438-39 | Added on Monday, February 18, 2019, 07:32 PM

If all interfaces that the proxy class implements are public, the proxy class does not belong to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7439-40 | Added on Monday, February 18, 2019, 07:33 PM

Otherwise, all non-public interfaces must belong to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7440 | Added on Monday, February 18, 2019, 07:33 PM

and the proxy class will also belong to
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7440-41 | Added on Monday, February 18, 2019, 07:34 PM

You can test whether a particular Class object represents a proxy class by calling the
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7442-43 | Added on Monday, February 18, 2019, 07:34 PM

java.lang.reflect.InvocationHandler 1.3
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7444 | Added on Monday, February 18, 2019, 07:34 PM

• Object invoke(Object proxy, Method method, Object[] args)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7447 | Added on Monday, February 18, 2019, 07:35 PM

java.lang.reflect.Proxy 1.3
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7448-49 | Added on Tuesday, February 19, 2019, 09:30 AM

• static Class getProxyClass(ClassLoader loader, Class[] interfaces)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7451-52 | Added on Tuesday, February 19, 2019, 09:31 AM

• static Object newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler handler)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 7454-56 | Added on Tuesday, February 19, 2019, 09:33 AM

• static boolean isProxyClass(Class c) returns true if c is a proxy class.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3084-85 | Added on Tuesday, February 19, 2019, 04:41 PM

All objects that are instances of the same class share a family resemblance by supporting the same
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1263-64 | Added on Wednesday, February 20, 2019, 09:35 PM

That's what's so tragic. The sex mafia is a sleazy bunch of nobodies.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3384 | Added on Thursday, February 21, 2019, 02:17 AM

• GregorianCalendar()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3387-89 | Added on Thursday, February 21, 2019, 02:18 AM

• GregorianCalendar(int year, int month, int day) • GregorianCalendar(int year, int month, int day, int hour, int minutes, int seconds)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3392 | Added on Thursday, February 21, 2019, 02:19 AM

• int get(int field)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3397 | Added on Thursday, February 21, 2019, 02:21 AM

• void set(int field, int value)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3400-3402 | Added on Thursday, February 21, 2019, 02:22 AM

• void set(int year, int month, int day) • void set(int year, int month, int day, int hour, int minutes, int seconds)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3406 | Added on Thursday, February 21, 2019, 02:24 AM

• void add(int field, int amount)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Bookmark Loc. 3410 | Added on Thursday, February 21, 2019, 02:25 AM


==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3410-11 | Added on Thursday, February 21, 2019, 02:25 AM

• int getFirstDayOfWeek()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3413 | Added on Thursday, February 21, 2019, 02:26 AM

• void setTime(Date time)
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3418 | Added on Thursday, February 21, 2019, 02:26 AM

• Date getTime()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 3422-25 | Added on Thursday, February 21, 2019, 02:27 AM

• String[] getShortWeekdays() • String[] getShortMonths() • String[] getWeekdays() • String[] getMonths()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4088-93 | Added on Saturday, February 23, 2019, 11:02 AM

The program in Listing 4.5 shows many of the features that we discussed in this section: • Overloaded constructors • A call to another constructor with this(...) • A no-argument constructor • An object initialization block • A static initialization block • An instance field initialization
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4095 | Added on Saturday, February 23, 2019, 11:03 AM

• Random()
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4097-98 | Added on Saturday, February 23, 2019, 11:03 AM

• int nextInt(int n) 1.2
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4263-64 | Added on Sunday, February 24, 2019, 12:58 AM

Note again that the compiler operates on files (with file separators and an extension .java), whereas the Java interpreter loads a class (with dot separators).
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4462-63 | Added on Tuesday, February 26, 2019, 01:01 AM

• @see reference This tag adds a hyperlink in the “see also” section. It can be used with both classes and methods.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4463 | Added on Tuesday, February 26, 2019, 01:01 AM

Here, reference can be one of the following:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4464-65 | Added on Tuesday, February 26, 2019, 01:03 AM

package.class#feature label <a href="...">label</a> "text"
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4475-76 | Added on Tuesday, February 26, 2019, 01:04 AM

If the @see tag is followed by a < character, then you need to specify a hyperlink. You can link to any URL you like. For example:
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4478-79 | Added on Tuesday, February 26, 2019, 01:04 AM

In each of these cases, you can specify an optional label that will appear as the link anchor. If you omit the label, the user will see the target code name or URL as the anchor.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4480 | Added on Tuesday, February 26, 2019, 01:05 AM

If the @see tag is followed by a " character, then the text is displayed in the “see also” section.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4482-87 | Added on Tuesday, February 26, 2019, 01:05 AM

You can add multiple @see tags for one feature, but you must keep them all together. • If you like, you can place hyperlinks to other classes or methods anywhere in any of your documentation comments. Insert a special tag of the form {@link package.class#feature label} anywhere in a comment. The feature description follows the same rules as for the @see tag.
==========
Core Java Volume I--Fundamentals (9th Edition): 1 (Core Series) (Cay S. Horstmann and Gary Cornell)
- Highlight Loc. 4567-69 | Added on Tuesday, February 26, 2019, 01:18 AM

A good convention is that a class name should be a noun (Order), or a noun preceded by an adjective (RushOrder) or a gerund (an “-ing” word, like BillingAddress). As for methods, follow the standard convention that accessor methods begin with a lowercase get (getSalary) and mutator methods use a lowercase set (setSalary).
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1274-75 | Added on Friday, March 01, 2019, 10:21 PM

Imagine if bank robberies were handled with the same nonchalance.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1379-80 | Added on Saturday, March 09, 2019, 01:25 AM

The group gathered at around 6:00 p.m., and by the time dessert was served at 8:30 not a word had been said about the ostensible reason for the dinner.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1456-57 | Added on Saturday, March 09, 2019, 10:58 AM

She put the lamps in place and arranged the pots and pans, the crockery, and the cutlery in the kitchen cupboards and drawers.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1479-80 | Added on Saturday, March 09, 2019, 11:30 AM

Maybe it was the adult world which was belatedly pushing its way into her life.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1482 | Added on Saturday, March 09, 2019, 11:38 AM

on Grenada she had taken the ring out of her left labium it had chafed,
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1485-86 | Added on Saturday, March 09, 2019, 11:39 AM

At last she crept under her new duvet.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1553-54 | Added on Wednesday, March 13, 2019, 09:38 AM

Malm squirmed with annoyance. He was the only one in the room who did not know what that unusual situation was.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1579-80 | Added on Wednesday, March 13, 2019, 09:07 PM

You all pretend to be cynics and nihilists, but it's your own morality that steers the magazine, and several times I've noticed that it's quite a special sort of morality.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1752 | Added on Sunday, March 17, 2019, 12:34 PM

She's a closet dyke. It's been going on since last autumn and it's getting a bit boring. But she's really luscious.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1785 | Added on Sunday, March 17, 2019, 11:43 PM

it was for grievous bodily harm when, several years ago, he had gone berserk in a bar in Stockholm.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1891-92 | Added on Tuesday, March 19, 2019, 11:40 PM

Out of sheer cussedness she had tried both of their mobile numbers later that evening, and both were turned off.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1898 | Added on Tuesday, March 19, 2019, 11:44 PM

In certain ways he was a fool, and in others so insightful that he seemed like an oracle.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1923-24 | Added on Tuesday, March 19, 2019, 11:52 PM

that she had a need beyond what he could offer her, even in the form of his most imaginative acrobatic exercises in the Jacuzzi.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1984 | Added on Thursday, March 21, 2019, 10:13 AM

She also varnished the parquet floor in the living room.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1985-87 | Added on Thursday, March 21, 2019, 10:15 AM

Eventually the apartment was empty of everything except for a kitchen table of solid wood, much the worse for wear, that Mimmi intended to sand down and refinish, two stools that Salander had pounced on when an attic in the building was cleared, and a set of sturdy shelves in the living room that Mimmi thought she could repaint.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 1992 | Added on Thursday, March 21, 2019, 10:47 AM

Mimmi shut up, not sure how to interpret Salander's brusque dismissal.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2221 | Added on Saturday, March 23, 2019, 12:06 AM

She must have pinched it from the apartment after he fell ill. As a keepsake?
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2220-21 | Added on Saturday, March 23, 2019, 12:07 AM

She set out the chessmen in front of him and he recognized with shock that it was his own board.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2266-67 | Added on Saturday, March 23, 2019, 12:18 AM

One month ago he could hardly get out of his chair, which is partly due to muscle atrophy from being in bed for so long.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2284-85 | Added on Saturday, March 23, 2019, 12:22 AM

Of course I wish we had more resources and that the cutbacks didn't affect us, but I assure you that he's getting very competent care.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2352-53 | Added on Saturday, March 23, 2019, 01:16 AM

The doctor had observed that she did not treat him as you would an invalid on the contrary, it looked like they were squabbling all the time,
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2372 | Added on Saturday, March 23, 2019, 01:23 AM

Whatever his physical handicap as a result of the stroke, there was nothing wrong now with his intellectual acuity.
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 20-21 | Added on Saturday, March 23, 2019, 04:50 PM

Proponents of this perspective argue that just like children learn their first language by making errors, adult second language learners also learn from making errors.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2577-78 | Added on Sunday, March 24, 2019, 02:10 AM

He wore a denim jacket, black jeans, and high-heeled boots.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2618-19 | Added on Sunday, March 24, 2019, 02:25 AM

She was wearing dark jeans and sneakers with crepe soles.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2658 | Added on Sunday, March 24, 2019, 01:23 PM

She also heard the clacking of keys from Svensson's iBook.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2724 | Added on Monday, March 25, 2019, 12:45 AM

She downloaded copies of some of Svensson's articles and found a photographic byline of him.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2728-29 | Added on Monday, March 25, 2019, 12:47 AM

Some feminists found Johansson's conclusions significant, others criticized her for spreading bourgeois illusions.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2753 | Added on Monday, March 25, 2019, 12:54 AM

And fuckups had been all too frequent lately.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2754-55 | Added on Monday, March 25, 2019, 12:55 AM

He was the one who had done the legwork, cemented partnerships, negotiated deals, and made sure that the deliveries got to the right place.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2759 | Added on Monday, March 25, 2019, 12:57 AM

A gabby street dealer who had found out far too much about the supply chain had almost implicated Svavelsj+| MC.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2763 | Added on Monday, March 25, 2019, 12:59 AM

Methamphetamine was a discreet and easy-to-manage source of income big profits, small risks.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2766-68 | Added on Tuesday, March 26, 2019, 09:35 AM

The business was small change, and liable at any time to set off hypocritical screeds in the media and debates in that strange political entity called the Swedish parliament.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2775-76 | Added on Tuesday, March 26, 2019, 09:48 AM

Then he would have to take matters into his own hands and mete out punishment. And if the revelation was blatant enough, prosecutors and police would be forced to act otherwise parliament really would wake up and pay attention.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2792-93 | Added on Tuesday, March 26, 2019, 10:16 AM

He put the car in gear and screeched off.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2821-22 | Added on Thursday, March 28, 2019, 09:37 AM

they had so dramatically botched their getaway that after only twenty-four hours the police were able to identify and arrest the gang members.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2829-31 | Added on Thursday, March 28, 2019, 09:52 AM

a Nazi prison organization that in turn was linked to the Wolfpack Brotherhood and to ex-con Hell's Angels clubs around the world, as well as to other cretinous violent Nazi organizations such as the Swedish Resistance Movement.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2842-43 | Added on Thursday, March 28, 2019, 10:45 AM

but she worked in the media and had just finished a book that had been in gestation for ten years, which dealt with the image of women in the mass media.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2849-50 | Added on Friday, March 29, 2019, 01:51 AM

Blomkvist had meant to go home reasonably early, but many of the guests were old acquaintances he seldom saw. Besides, no-one jabbered on too much about the Wennerstr+|m affair.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2865-66 | Added on Friday, March 29, 2019, 01:55 AM

He was flailing at the air as Salander then seemed to sink through the ground.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2884-85 | Added on Friday, March 29, 2019, 02:00 AM

Just as Blomkvist got to him he turned and gave him a powerful backhand across the face.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2890-91 | Added on Friday, March 29, 2019, 02:02 AM

She kept running out of his sight for another few yards and dived headfirst into a rhododendron bush alongside the building.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2918-19 | Added on Friday, March 29, 2019, 02:07 AM

Salander was seething inside. She was so enraged that she tasted blood in her mouth. Now she was going to have to punish him.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2964-65 | Added on Friday, March 29, 2019, 10:39 PM

I don't know what kind of a mess you've got yourself into, but the ruckus on Lundagatan was alarming.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2971-74 | Added on Friday, March 29, 2019, 10:42 PM

There was a pack of Marlboro Lights, three Bic lighters, a box of throat lozenges, a packet of tissues, a toothbrush, toothpaste, three tampons in a side pocket, an unopened pack of condoms with a price sticker that showed they were bought at Gatwick Airport in London, a bound notebook with stiff black A4 dividers, five ballpoint pens, a can of Mace, a small bag with makeup, an FM radio with an earphone but no batteries, and Saturday's Aftonbladet.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 2992-94 | Added on Saturday, March 30, 2019, 01:23 AM

He stubbed out his cigarette and put on his jacket, set the alarm in the office, and walked to the terminal at Slussen, where he took the bus out to the yuppie reserve in St+nket, near L+nnnersta Sound.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3010 | Added on Sunday, March 31, 2019, 11:26 AM

You're going to be the boss not an apparatchik and the editorial page will take care of itself.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 303-4 | Added on Sunday, March 31, 2019, 01:35 PM

Chapter 2. The Mathematics of Algorithms
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 307-8 | Added on Sunday, March 31, 2019, 01:35 PM

Size of a Problem Instance
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 308-9 | Added on Sunday, March 31, 2019, 01:35 PM

An instance of a problem is a particular input data set given to a program.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 308-9 | Added on Sunday, March 31, 2019, 01:36 PM

An instance of a problem is a particular input data set given to a program. In most problems, the execution time of a program increases with the size of this data set.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 314-15 | Added on Sunday, March 31, 2019, 01:39 PM

Designing efficient algorithms often starts by selecting the proper data structures in which to represent the problem.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 315-16 | Added on Sunday, March 31, 2019, 01:48 PM

Because we cannot formally define the size of an instance, we assume an instance is encoded in some generally accepted, concise manner.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 317-19 | Added on Sunday, March 31, 2019, 01:49 PM

In case some of the numbers require more than one word—but only a constant, fixed number of words—our measure of the size of an instance is off only by a multiplicative constant.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 333-35 | Added on Sunday, March 31, 2019, 01:54 PM

Rate of Growth of Functions We describe the behavior of an algorithm by representing the rate of growth of its execution time as a function of the size of the input problem instance.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 343-45 | Added on Sunday, March 31, 2019, 01:57 PM

We assume that changing the platform will change the execution time of the program by a constant factor, and that we can therefore ignore platform differences in conformance with the asymptotically equivalent principle described earlier.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 364-65 | Added on Sunday, March 31, 2019, 10:54 PM

we ignore the constant multiplier and are concerned only when the size of a problem instance is large.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 402-3 | Added on Sunday, March 31, 2019, 11:19 PM

Analysis in the Best, Average, and Worst Cases
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 416-17 | Added on Sunday, March 31, 2019, 11:22 PM

Choosing an algorithm depends on understanding the problem being solved and the underlying probability distribution of the instances likely to be treated, as well as the behavior of the algorithms being considered.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 417-18 | Added on Sunday, March 31, 2019, 11:23 PM

To provide some guidance, algorithms are typically presented with three common cases in mind: Worst case
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 417-18 | Added on Sunday, March 31, 2019, 11:23 PM

To provide some guidance, algorithms are typically presented with three common cases in mind:
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 418 | Added on Sunday, March 31, 2019, 11:23 PM

Worst case
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 419-20 | Added on Sunday, March 31, 2019, 11:23 PM

Instead of trying to identify the specific input, algorithm designers typically describe properties of the input that prevent an algorithm from running efficiently.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 421 | Added on Sunday, March 31, 2019, 11:23 PM

Average case
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 424 | Added on Sunday, March 31, 2019, 11:24 PM

Best case
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 422-23 | Added on Sunday, March 31, 2019, 11:25 PM

While some instances will require greater time to complete because of some special cases, the vast majority will not.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 424-25 | Added on Sunday, March 31, 2019, 11:25 PM

Defines a class of problem instances for which an algorithm exhibits its best runtime behavior.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 431 | Added on Sunday, March 31, 2019, 11:28 PM

Worst Case
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 444-45 | Added on Sunday, March 31, 2019, 11:31 PM

Average Case
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 499-500 | Added on Monday, April 01, 2019, 12:10 AM

Performance Families
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 500-504 | Added on Monday, April 01, 2019, 12:12 AM

We compare algorithms by evaluating their performance on problem instances of size n. This methodology is the standard means developed over the past half-century for comparing algorithms. By doing so, we can determine which algorithms scale to solve problems of a nontrivial size by evaluating the running time needed by the algorithm in relation to the size of the provided input. A secondary performance evaluation is to consider how much memory or storage an algorithm needs; we address these concerns within the individual algorithm descriptions, as appropriate.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 504-13 | Added on Monday, April 01, 2019, 12:14 AM

We use the following classifications, which are ordered by decreasing efficiency: Constant: O(1) Logarithmic: O(log n) Sublinear: O(nd) for d < 1 Linear: O(n) Linearithmic: O(n log n) Quadratic: O(n2) Exponential: O(2n)
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 513-15 | Added on Monday, April 01, 2019, 12:14 AM

When evaluating the performance of an algorithm, keep in mind that you must identify the most expensive computation within an algorithm to determine its classification.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 515-16 | Added on Monday, April 01, 2019, 12:18 AM

For example, consider an algorithm that is subdivided into two tasks, a task classified as linear followed by a task classified as quadratic. The overall performance of the algorithm must therefore be classified as quadratic.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3091-92 | Added on Monday, April 01, 2019, 12:19 AM

Annika Giannini had drunk only light beer and refrained from any wine or aquavit with the meal.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3097-98 | Added on Monday, April 01, 2019, 12:22 AM

He's becoming Swedish. Ten years ago it would have been grappa.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3116-17 | Added on Monday, April 01, 2019, 12:30 AM

This girl is manically private. She was the one who was attacked. She'll have to make the report.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3118-19 | Added on Monday, April 01, 2019, 12:30 AM

Bullheaded as usual, Annika said, patting Blomkvist on the cheek. What's the second problem?
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3156 | Added on Monday, April 01, 2019, 12:38 AM

Suddenly he felt an icy shiver run down his neck. He recognized the smell: cordite.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3229-30 | Added on Monday, April 01, 2019, 01:05 AM

Everyone looked at the footprints. Blomkvist looked at his Italian loafers.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3280-81 | Added on Monday, April 01, 2019, 01:38 AM

His whole evening, including the telephone conversation with Svensson, could be vouched for by a dozen members of the Giannini family.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3301 | Added on Monday, April 01, 2019, 01:42 AM

The hiatus had lasted little more than a year.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3305-6 | Added on Monday, April 01, 2019, 01:43 AM

They hit three bars in S+|dermalm before they were sufficiently tipsy to have a serious conversation, which took place on a park bench in Mariatorget around sunrise.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3326-27 | Added on Tuesday, April 02, 2019, 12:48 AM

Before Blomkvist could reply, Berger appeared at the top of the stairs, tying the sash of a white terry-cloth bathrobe.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3350-51 | Added on Tuesday, April 02, 2019, 12:52 AM

He felt only a huge emptiness, almost as if he were anesthetized.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3430-31 | Added on Tuesday, April 02, 2019, 01:27 AM

You're shocked about the murders, but you are not privy to the editorial work, so you cannot comment on any speculation.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3442-43 | Added on Tuesday, April 02, 2019, 01:31 AM

and he acquitted himself so well that for a time he was appointed division chief.
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 22-23 | Added on Tuesday, April 02, 2019, 11:20 PM

To explain the impact of the native language on a second language, a nonconventional concept called  Interlanguage was introduced by Selinker (1972).
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 27-30 | Added on Tuesday, April 02, 2019, 11:21 PM

With the introduction of  Interlanguage, scholarly attention moved to language learner’s cognitive mind. This approach explains second language learning process with the human internal mechanism of language learning. Unlike previous studies that viewed language system as a static system, these studies explored the cognitive aspects of learners in language learning.
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 30-31 | Added on Tuesday, April 02, 2019, 11:21 PM

Another group of scholars (Diller 1971) studied how semantics interacts with syntactic structure in the second language learning process. 
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 31-33 | Added on Tuesday, April 02, 2019, 11:23 PM

Assuming language learning is obtaining the knowledge of language structure and its meaning, scholars of this school argue that learning syntactic, semantic, and phonological form of a language in the context of lexical properties is crucial in second language learning.
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 34-37 | Added on Wednesday, April 03, 2019, 12:03 AM

 language acquisition in the context of the first language impact, a group  of scholars (e.g., Azlan and Narasuman 2013; Myers-Scotton 1993; Payant  2015; Rolin-Ianziti and Varshney 2008; Van Der Meij and Zhao  2010) explored second language acquisition in connection with 
==========
Second Language Acquisition Theories (Unknown)
- Bookmark Loc. 37 | Added on Wednesday, April 03, 2019, 12:03 AM


==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 37-39 | Added on Wednesday, April 03, 2019, 12:04 AM

bilingual linguistic behavior. According to Myers-Scotton (1993), second language acquisition research is related to bilingual studies. Payant 
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 39-42 | Added on Wednesday, April 03, 2019, 12:05 AM

(2015) also argues that the use of multiple languages by a single speaker in a conversation can reveal significant insights on how two languages are mediated in the cognitive processes of language use. These studies acknowledge second language learners’ dependence on their first language. They mainly focus on the function of the first language as a mediating tool for enhancing the second language learner’s learning a new
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 44 | Added on Wednesday, April 03, 2019, 12:06 AM

With the influence of the first language and bilingualism on second language acquisition, another concept called “transfer” was introduced. 
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 45-46 | Added on Wednesday, April 03, 2019, 12:08 AM

Clyne (1967) asserts that “transfer” occurs when the elements of languages are adopted to speak another language.
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 49-54 | Added on Wednesday, April 03, 2019, 12:09 AM

Another group of scholars (e.g., Cohen and Olshtain 1981; Kasper  1982; Fraser and Nolen 1981; House 1982; Wolfson 1981; Blum-Kulka  1982; Thomas 1983) argue that second language learners must learn cultural values and norms of the country that the language they are learning is used because the referential and social implications of the linguistic expressions should be attained to become truly comfortable in communication in a second language. This is the so-called  Interlanguage pragmatics.
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 57-59 | Added on Wednesday, April 03, 2019, 12:11 AM

the consensus of many recent studies is that second language learning is not the process of just learning the phonetically and syntactic grammar. It is more inclusive attainment interconnecting syntactic, pragmatic, and sociocultural disciplines of language learning.
==========
Second Language Acquisition Theories (Unknown)
- Highlight Loc. 61-63 | Added on Wednesday, April 03, 2019, 12:11 AM

Accordingly, the native language influence also needs to be compared with the other kinds of factors, including sociocultural, cognitive, psycholinguistic, strategy-oriented, and task-based (Jarvis 1998).
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3470-71 | Added on Wednesday, April 03, 2019, 10:15 AM

A journalist heard the comment and started asking questions, at which point the commissioner quickly repaired to his office.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3471-72 | Added on Wednesday, April 03, 2019, 10:16 AM

Bublanski belonged to the S+|der congregation and ate vegetarian food if kosher fare was unavailable.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3488-90 | Added on Wednesday, April 03, 2019, 07:56 PM

OK, you decide who you want on the team, but do it quickly. The brass are already after us. Bublanski took that to be an exaggeration. At this hour, the brass would be at breakfast.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3501-2 | Added on Wednesday, April 03, 2019, 07:59 PM

He was a laconic and solidly built officer with such a short stubble of blond hair that at a distance he looked completely bald.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3510-11 | Added on Wednesday, April 03, 2019, 08:02 PM

The first was a warning shot, the second was deliberately aimed but missed the man no easy matter since the distance was less than ten feet and the third shot hit him in the middle of his chest, severing the aorta.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3517 | Added on Wednesday, April 03, 2019, 08:04 PM

On the minus side, he was egocentric and had a loudmouth sense of humour that especially bothered Bublanski.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3726-27 | Added on Friday, April 05, 2019, 12:34 AM

Since the day he had first met Salander he had had a strong presentiment that her life was on a trajectory towards catastrophe.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3838 | Added on Friday, April 05, 2019, 12:53 AM

She saw nothing untoward, but her apprehension increased.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3967 | Added on Friday, April 05, 2019, 06:00 PM

Shit, Bublanski thought. Why didn't I come straight here this morning? But he only nodded and changed tack.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 3998 | Added on Friday, April 05, 2019, 06:05 PM

When I went up the stairs on Lundagatan I only saw him from behind, but he turned around when he clobbered me.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4085-86 | Added on Friday, April 05, 2019, 06:19 PM

The kitchen chairs were painted in different pastel colours.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4219-20 | Added on Friday, April 05, 2019, 11:11 PM

Black leather, patent leather, corsets, and fetishist whips and sex toys in a drawer.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4346-47 | Added on Friday, April 05, 2019, 11:34 PM

Bjurman was her guardian and he owned the gun. Mmm ' , Bublanski said glumly.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4379-80 | Added on Saturday, April 06, 2019, 12:24 AM

Blomkvist had not slept for thirty-six hours, and the days when he could skip a night's sleep with impunity were long gone.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4476-77 | Added on Saturday, April 06, 2019, 12:45 AM

Do you like working at Millennium? he said, disconcertingly. I mean, you've been working for us for a year and a half now, but I've been running around so much that we've never had a chance to get to know each other.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4577-78 | Added on Saturday, April 06, 2019, 01:05 AM

But the police weren't taking into account whether she might have felt that her actions were justified or whether there might be some mitigating circumstance or a reasonable explanation for her having gone berserk.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4672-73 | Added on Saturday, April 06, 2019, 01:21 AM

Niklas Hedstr+|m was regarded as a rookie. He had been trained at the police academy, but just before he was due to take his final exams he learned that he had a congenital heart defect.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4685-87 | Added on Saturday, April 06, 2019, 02:19 PM

I tried a little light banter with her once, Hedstr+|m said, again with a hint of a smile. It didn't go so well. I thought she was going to bite my head off. She was a first-class sourpuss, and I hardly exchanged ten sentences with her.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4722-23 | Added on Saturday, April 06, 2019, 06:30 PM

Ekstr+|m and I decided that you two he pointed at Bohman and Hedstr+|m will move over to Kungsholmen and be seconded to Bublanski's team.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4752 | Added on Saturday, April 06, 2019, 06:38 PM

He was casually dressed in a beige corduroy jacket, jeans, and a light-blue striped shirt buttoned at the neck.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4766-67 | Added on Saturday, April 06, 2019, 06:42 PM

And you think that Lisbeth Salander is one of these loonies? Faste asked.
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 1295 | Added on Sunday, April 07, 2019, 12:11 AM

Summary of Asymptotic Growth
==========
Algorithms in a Nutshell: A Practical Guide (George T. Heineman, Gary Pollice and Stanley Selkow)
- Highlight Loc. 1295-1300 | Added on Sunday, April 07, 2019, 12:11 AM

An algorithm with better asymptotic growth will eventually execute faster than one with worse asymptotic growth, regardless of the actual constants. The actual breakpoint will differ based on the actual constants, but it exists and can be empirically evaluated. In addition, during asymptotic analysis we only need to be concerned with the fastest-growing term of the t(n) function. For this reason, if the number of operations for an algorithm can be computed as c*n3 + d*n*log(n), we would classify this algorithm as O(n3)
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4819-20 | Added on Sunday, April 07, 2019, 04:11 PM

I don't want Lisbeth Salander to be harmed when you apprehend her ' but yes, in her case I would try to make sure the arrest is carried out with the utmost circumspection.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4828-29 | Added on Sunday, April 07, 2019, 04:14 PM

They had an ironclad connection to one victim and a possible connection via Blomkvist to the other two victims.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4845-46 | Added on Sunday, April 07, 2019, 04:18 PM

His Achilles heel was a microscopic hole in his pericardium that caused a heart murmur and meant that the wall of one chamber was compromised.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4854 | Added on Sunday, April 07, 2019, 04:21 PM

He thought the singer was a snobbish and standoffish old bitch.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4861 | Added on Sunday, April 07, 2019, 04:23 PM

He stole five of the most risqu+! images, which had obviously been taken by some lover.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4963-64 | Added on Monday, April 08, 2019, 09:06 PM

Evil Fingers? Bublanski repeated. Seems to be something occult.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 4995-96 | Added on Monday, April 08, 2019, 10:54 PM

There are plenty of crazies around, but it can hardly be a standard motif among tattoo enthusiasts.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5055-57 | Added on Monday, April 08, 2019, 11:39 PM

There was a brief CV in the papers, but my guess is that half of it is made up. So I should ferret out his background. Precisely. Everything you can find.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5258-59 | Added on Wednesday, April 10, 2019, 10:36 PM

As he parked he saw that the cabin was a modern one-family home which looked to be habitable all year round. It had a view of the sea towards the Jungfrufj+nrden inlet.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5283-84 | Added on Thursday, April 11, 2019, 01:09 AM

Miriam Wu glowered at him. I don't give a shit what you believe. I haven't done anything illegal, and how I choose to live my life and who I have sex with is none of your business or anyone else's.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5294-95 | Added on Thursday, April 11, 2019, 01:14 AM

She had had no idea that Salander was under guardianship, or that in her teens she had been committed, or that she had copious psychiatric assessments on her CV.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5357-58 | Added on Thursday, April 11, 2019, 01:26 AM

Miriam Wu smiled sweetly when Faste gave her a filthy look and slouched after Modig into the corridor.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5360 | Added on Thursday, April 11, 2019, 01:27 AM

Oh, come off it. That surly cunt is squirming like a snake.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5476-77 | Added on Thursday, April 11, 2019, 09:57 AM

He wondered whether the famous Officer Bubble had something going on with that bitch. It wouldn't surprise him. He seemed thoroughly pussy-whipped by her.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5484-85 | Added on Thursday, April 11, 2019, 10:07 AM

After a while he took out his mobile and called Tony Scala, a freelance journalist who made a living writing drivel for men's magazines.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5507 | Added on Thursday, April 11, 2019, 10:12 AM

We found handcuffs, leather outfits, whips, and the whole shebang when we searched the place.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5526-27 | Added on Thursday, April 11, 2019, 10:25 AM

Miriam Wu contemplated a dropkick and an elbow to his nose, but she had the presence of mind to realize that it would only give them more photo ops.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5532 | Added on Thursday, April 11, 2019, 10:27 AM

Then she closed the inner door and lay on the bed, closing her eyes. Lisbeth, I'm going to wring your neck when I find you.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5579-80 | Added on Thursday, April 11, 2019, 11:17 AM

I'm inclined to agree with you. He can be a total prick, but he was genuinely outraged at the leak.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5582 | Added on Thursday, April 11, 2019, 10:48 PM

It was also within walking distance of the synagogue on St. Paulsgatan.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5585 | Added on Thursday, April 11, 2019, 10:49 PM

They stopped at the synagogue for a while and talked to the rabbi.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5597-98 | Added on Thursday, April 11, 2019, 10:52 PM

One of the girls was holding up a flag with a pentagram and another was making a sign with her index and little fingers.
==========
the Girl Who Played with Fire (Stieg - Millennium 02 Larsson)
- Highlight Loc. 5608-9 | Added on Thursday, April 11, 2019, 10:57 PM

The rest of the article was based on a deliberately provocative piece Wu had written six years earlier for a feminist fanzine.
==========
